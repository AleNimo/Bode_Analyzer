
UTN_USBHID02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e8  080062e8  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062f0  080062f0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f4  080062f4  000162f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080062f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000164  0800645c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000abc  0800645c  00020abc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc61  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002916  00000000  00000000  0002ddf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00030710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  000311f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018375  00000000  00000000  00031ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eca4  00000000  00000000  00049f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882bd  00000000  00000000  00058bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0e7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002af8  00000000  00000000  000e0ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000164 	.word	0x20000164
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006260 	.word	0x08006260

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000168 	.word	0x20000168
 80001d0:	08006260 	.word	0x08006260

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b09a      	sub	sp, #104	; 0x68
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 f9a1 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f829 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f891 	bl	800060c <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
 80004ea:	f005 fa15 	bl	8005918 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(5000);
 80004ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80004f2:	f000 fa09 	bl	8000908 <HAL_Delay>
  for(uint8_t i=0;i<100;i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80004fc:	e00b      	b.n	8000516 <main+0x3e>
	  BufferOut[i] = '8';
 80004fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000502:	3368      	adds	r3, #104	; 0x68
 8000504:	443b      	add	r3, r7
 8000506:	2238      	movs	r2, #56	; 0x38
 8000508:	f803 2c68 	strb.w	r2, [r3, #-104]
  for(uint8_t i=0;i<100;i++)
 800050c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000510:	3301      	adds	r3, #1
 8000512:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000516:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800051a:	2b63      	cmp	r3, #99	; 0x63
 800051c:	d9ef      	bls.n	80004fe <main+0x26>

  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, BufferOut, 100);
 800051e:	463b      	mov	r3, r7
 8000520:	2264      	movs	r2, #100	; 0x64
 8000522:	4619      	mov	r1, r3
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <main+0x5c>)
 8000526:	f003 ffa7 	bl	8004478 <USBD_CUSTOM_HID_SendReport>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(5000);
 800052a:	f241 3088 	movw	r0, #5000	; 0x1388
 800052e:	f000 f9eb 	bl	8000908 <HAL_Delay>
 8000532:	e7fa      	b.n	800052a <main+0x52>
 8000534:	20000188 	.word	0x20000188

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fe82 	bl	8006250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <SystemClock_Config+0xd0>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b0:	2348      	movs	r3, #72	; 0x48
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005b8:	2303      	movs	r3, #3
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fddf 	bl	8002184 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005cc:	f000 f88c 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2102      	movs	r1, #2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f841 	bl	8002674 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 f876 	bl	80006e8 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	; 0x28
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a2c      	ldr	r2, [pc, #176]	; (80006dc <MX_GPIO_Init+0xd0>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a25      	ldr	r2, [pc, #148]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_GPIO_Init+0xd0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_GPIO_Init+0xd0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_GPIO_Init+0xd0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_GPIO_Init+0xd4>)
 8000698:	f000 fbf0 	bl	8000e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_GPIO_Init+0xd8>)
 80006b4:	f000 fa5e 	bl	8000b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b8:	2320      	movs	r3, #32
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_GPIO_Init+0xd4>)
 80006d0:	f000 fa50 	bl	8000b74 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	; 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020800 	.word	0x40020800

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	; (8000740 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <HAL_MspInit+0x4c>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000708:	6453      	str	r3, [r2, #68]	; 0x44
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x4c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000732:	2007      	movs	r0, #7
 8000734:	f000 f9dc 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f89a 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <OTG_FS_IRQHandler+0x10>)
 800079e:	f000 fcd6 	bl	800114e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000698 	.word	0x20000698

080007ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007ec:	4c0b      	ldr	r4, [pc, #44]	; (800081c <LoopFillZerobss+0x26>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007fa:	f7ff ffd7 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f005 fd03 	bl	8006208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000802:	f7ff fe69 	bl	80004d8 <main>
  bx  lr    
 8000806:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000808:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000814:	080062f8 	.word	0x080062f8
  ldr r2, =_sbss
 8000818:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800081c:	20000abc 	.word	0x20000abc

08000820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_Init+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <HAL_Init+0x40>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <HAL_Init+0x40>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <HAL_Init+0x40>)
 800083a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_Init+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_Init+0x40>)
 8000846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f94f 	bl	8000af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000852:	2000      	movs	r0, #0
 8000854:	f000 f808 	bl	8000868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000858:	f7ff ff4c 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40023c00 	.word	0x40023c00

08000868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x54>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x58>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f967 	bl	8000b5a <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f000 f92f 	bl	8000b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_InitTick+0x5c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000180 	.word	0x20000180

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000180 	.word	0x20000180

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff ffee 	bl	80008f0 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffde 	bl	80008f0 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	db0b      	blt.n	80009de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	f003 021f 	and.w	r2, r3, #31
 80009cc:	4907      	ldr	r1, [pc, #28]	; (80009ec <__NVIC_EnableIRQ+0x38>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	2001      	movs	r0, #1
 80009d6:	fa00 f202 	lsl.w	r2, r0, r2
 80009da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e100 	.word	0xe000e100

080009f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	db0a      	blt.n	8000a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	490c      	ldr	r1, [pc, #48]	; (8000a3c <__NVIC_SetPriority+0x4c>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	0112      	lsls	r2, r2, #4
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	440b      	add	r3, r1
 8000a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a18:	e00a      	b.n	8000a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4908      	ldr	r1, [pc, #32]	; (8000a40 <__NVIC_SetPriority+0x50>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	3b04      	subs	r3, #4
 8000a28:	0112      	lsls	r2, r2, #4
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	761a      	strb	r2, [r3, #24]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b089      	sub	sp, #36	; 0x24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	f1c3 0307 	rsb	r3, r3, #7
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	bf28      	it	cs
 8000a62:	2304      	movcs	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d902      	bls.n	8000a74 <NVIC_EncodePriority+0x30>
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3b03      	subs	r3, #3
 8000a72:	e000      	b.n	8000a76 <NVIC_EncodePriority+0x32>
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	43da      	mvns	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	401a      	ands	r2, r3
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa01 f303 	lsl.w	r3, r1, r3
 8000a96:	43d9      	mvns	r1, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	4313      	orrs	r3, r2
         );
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3724      	adds	r7, #36	; 0x24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
	...

08000aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000abc:	d301      	bcc.n	8000ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00f      	b.n	8000ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <SysTick_Config+0x40>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aca:	210f      	movs	r1, #15
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f7ff ff8e 	bl	80009f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x40>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x40>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f7ff ff29 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b18:	f7ff ff3e 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	68b9      	ldr	r1, [r7, #8]
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	f7ff ff8e 	bl	8000a44 <NVIC_EncodePriority>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <__NVIC_SetPriority>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff31 	bl	80009b4 <__NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ffa2 	bl	8000aac <SysTick_Config>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	; 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	e159      	b.n	8000e44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f040 8148 	bne.w	8000e3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d005      	beq.n	8000bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d130      	bne.n	8000c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	f003 0201 	and.w	r2, r3, #1
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b03      	cmp	r3, #3
 8000c32:	d017      	beq.n	8000c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	689a      	ldr	r2, [r3, #8]
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d123      	bne.n	8000cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	f003 0307 	and.w	r3, r3, #7
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	220f      	movs	r2, #15
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	691a      	ldr	r2, [r3, #16]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	08da      	lsrs	r2, r3, #3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3208      	adds	r2, #8
 8000cb2:	69b9      	ldr	r1, [r7, #24]
 8000cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0203 	and.w	r2, r3, #3
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80a2 	beq.w	8000e3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a56      	ldr	r2, [pc, #344]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b54      	ldr	r3, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x2e8>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d16:	4a52      	ldr	r2, [pc, #328]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <HAL_GPIO_Init+0x2f0>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d019      	beq.n	8000d76 <HAL_GPIO_Init+0x202>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a48      	ldr	r2, [pc, #288]	; (8000e68 <HAL_GPIO_Init+0x2f4>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d013      	beq.n	8000d72 <HAL_GPIO_Init+0x1fe>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a47      	ldr	r2, [pc, #284]	; (8000e6c <HAL_GPIO_Init+0x2f8>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00d      	beq.n	8000d6e <HAL_GPIO_Init+0x1fa>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a46      	ldr	r2, [pc, #280]	; (8000e70 <HAL_GPIO_Init+0x2fc>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x1f6>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a45      	ldr	r2, [pc, #276]	; (8000e74 <HAL_GPIO_Init+0x300>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_GPIO_Init+0x1f2>
 8000d62:	2304      	movs	r3, #4
 8000d64:	e008      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d66:	2307      	movs	r3, #7
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e004      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_Init+0x204>
 8000d76:	2300      	movs	r3, #0
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	f002 0203 	and.w	r2, r2, #3
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d88:	4935      	ldr	r1, [pc, #212]	; (8000e60 <HAL_GPIO_Init+0x2ec>)
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dba:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000de4:	4a24      	ldr	r2, [pc, #144]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e0e:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <HAL_GPIO_Init+0x304>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3301      	adds	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	2b0f      	cmp	r3, #15
 8000e48:	f67f aea2 	bls.w	8000b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40013800 	.word	0x40013800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020c00 	.word	0x40020c00
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40013c00 	.word	0x40013c00

08000e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	807b      	strh	r3, [r7, #2]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e8c:	787b      	ldrb	r3, [r7, #1]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e92:	887a      	ldrh	r2, [r7, #2]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e98:	e003      	b.n	8000ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	041a      	lsls	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	619a      	str	r2, [r3, #24]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb0:	b08f      	sub	sp, #60	; 0x3c
 8000eb2:	af0a      	add	r7, sp, #40	; 0x28
 8000eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e10f      	b.n	80010e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f004 fe92 	bl	8005c04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fec5 	bl	8002c8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	687e      	ldr	r6, [r7, #4]
 8000f0c:	466d      	mov	r5, sp
 8000f0e:	f106 0410 	add.w	r4, r6, #16
 8000f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f22:	1d33      	adds	r3, r6, #4
 8000f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f26:	6838      	ldr	r0, [r7, #0]
 8000f28:	f001 fd9c 	bl	8002a64 <USB_CoreInit>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2202      	movs	r2, #2
 8000f36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0d0      	b.n	80010e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 feb3 	bl	8002cb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e04a      	b.n	8000fe6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	1a9b      	subs	r3, r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	333d      	adds	r3, #61	; 0x3d
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	333c      	adds	r3, #60	; 0x3c
 8000f74:	7bfa      	ldrb	r2, [r7, #15]
 8000f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	b298      	uxth	r0, r3
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	4613      	mov	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	3342      	adds	r3, #66	; 0x42
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	333f      	adds	r3, #63	; 0x3f
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3344      	adds	r3, #68	; 0x44
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3348      	adds	r3, #72	; 0x48
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3350      	adds	r3, #80	; 0x50
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d3af      	bcc.n	8000f50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e044      	b.n	8001080 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	440b      	add	r3, r1
 8001030:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	1a9b      	subs	r3, r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3b5      	bcc.n	8000ff6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	687e      	ldr	r6, [r7, #4]
 8001092:	466d      	mov	r5, sp
 8001094:	f106 0410 	add.w	r4, r6, #16
 8001098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010a8:	1d33      	adds	r3, r6, #4
 80010aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ac:	6838      	ldr	r0, [r7, #0]
 80010ae:	f001 fe4b 	bl	8002d48 <USB_DevInit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e00d      	b.n	80010e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 fec7 	bl	8003e6c <USB_DevDisconnect>

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_PCD_Start+0x1c>
 8001100:	2302      	movs	r3, #2
 8001102:	e020      	b.n	8001146 <HAL_PCD_Start+0x5e>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	2b01      	cmp	r3, #1
 8001112:	d109      	bne.n	8001128 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001118:	2b01      	cmp	r3, #1
 800111a:	d005      	beq.n	8001128 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fd9d 	bl	8002c6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fe77 	bl	8003e2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800114e:	b590      	push	{r4, r7, lr}
 8001150:	b08d      	sub	sp, #52	; 0x34
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f002 ff35 	bl	8003fd4 <USB_GetMode>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 839d 	bne.w	80018ac <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f002 fe99 	bl	8003eae <USB_ReadInterrupts>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8393 	beq.w	80018aa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fe90 	bl	8003eae <USB_ReadInterrupts>
 800118e:	4603      	mov	r3, r0
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b02      	cmp	r3, #2
 8001196:	d107      	bne.n	80011a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	695a      	ldr	r2, [r3, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f002 0202 	and.w	r2, r2, #2
 80011a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fe7e 	bl	8003eae <USB_ReadInterrupts>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	2b10      	cmp	r3, #16
 80011ba:	d161      	bne.n	8001280 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0210 	bic.w	r2, r2, #16
 80011ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	f003 020f 	and.w	r2, r3, #15
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	3304      	adds	r3, #4
 80011ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	0c5b      	lsrs	r3, r3, #17
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d124      	bne.n	8001242 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d035      	beq.n	8001270 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800120e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	6a38      	ldr	r0, [r7, #32]
 8001218:	f002 fcb5 	bl	8003b86 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001228:	441a      	add	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123a:	441a      	add	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	e016      	b.n	8001270 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	0c5b      	lsrs	r3, r3, #17
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	2b06      	cmp	r3, #6
 800124c:	d110      	bne.n	8001270 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001254:	2208      	movs	r2, #8
 8001256:	4619      	mov	r1, r3
 8001258:	6a38      	ldr	r0, [r7, #32]
 800125a:	f002 fc94 	bl	8003b86 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126a:	441a      	add	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0210 	orr.w	r2, r2, #16
 800127e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fe12 	bl	8003eae <USB_ReadInterrupts>
 800128a:	4603      	mov	r3, r0
 800128c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001290:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001294:	d16e      	bne.n	8001374 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fe18 	bl	8003ed4 <USB_ReadDevAllOutEpInterrupt>
 80012a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012a6:	e062      	b.n	800136e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d057      	beq.n	8001362 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f002 fe3d 	bl	8003f3c <USB_ReadDevOutEPInterrupt>
 80012c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00c      	beq.n	80012e8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	015a      	lsls	r2, r3, #5
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	4413      	add	r3, r2
 80012d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012da:	461a      	mov	r2, r3
 80012dc:	2301      	movs	r3, #1
 80012de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fd98 	bl	8001e18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00c      	beq.n	800130c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012fe:	461a      	mov	r2, r3
 8001300:	2308      	movs	r3, #8
 8001302:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fe92 	bl	8002030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	015a      	lsls	r2, r3, #5
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4413      	add	r3, r2
 800131e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001322:	461a      	mov	r2, r3
 8001324:	2310      	movs	r3, #16
 8001326:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	015a      	lsls	r2, r3, #5
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4413      	add	r3, r2
 800133a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800133e:	461a      	mov	r2, r3
 8001340:	2320      	movs	r3, #32
 8001342:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	015a      	lsls	r2, r3, #5
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800135a:	461a      	mov	r2, r3
 800135c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001360:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3301      	adds	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d199      	bne.n	80012a8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fd98 	bl	8003eae <USB_ReadInterrupts>
 800137e:	4603      	mov	r3, r0
 8001380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001384:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001388:	f040 80c0 	bne.w	800150c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fdb9 	bl	8003f08 <USB_ReadDevAllInEpInterrupt>
 8001396:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800139c:	e0b2      	b.n	8001504 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80a7 	beq.w	80014f8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fddf 	bl	8003f78 <USB_ReadDevInEPInterrupt>
 80013ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d057      	beq.n	8001476 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	2201      	movs	r2, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43db      	mvns	r3, r3
 80013e0:	69f9      	ldr	r1, [r7, #28]
 80013e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013e6:	4013      	ands	r3, r2
 80013e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	015a      	lsls	r2, r3, #5
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f6:	461a      	mov	r2, r3
 80013f8:	2301      	movs	r3, #1
 80013fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d132      	bne.n	800146a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3348      	adds	r3, #72	; 0x48
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4403      	add	r3, r0
 8001424:	3344      	adds	r3, #68	; 0x44
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4419      	add	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4403      	add	r3, r0
 8001438:	3348      	adds	r3, #72	; 0x48
 800143a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	d113      	bne.n	800146a <HAL_PCD_IRQHandler+0x31c>
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3350      	adds	r3, #80	; 0x50
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d108      	bne.n	800146a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001462:	461a      	mov	r2, r3
 8001464:	2101      	movs	r1, #1
 8001466:	f002 fde7 	bl	8004038 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f004 fc48 	bl	8005d06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	015a      	lsls	r2, r3, #5
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148c:	461a      	mov	r2, r3
 800148e:	2308      	movs	r3, #8
 8001490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	015a      	lsls	r2, r3, #5
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	4413      	add	r3, r2
 80014a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a8:	461a      	mov	r2, r3
 80014aa:	2310      	movs	r3, #16
 80014ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	015a      	lsls	r2, r3, #5
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	4413      	add	r3, r2
 80014c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014c4:	461a      	mov	r2, r3
 80014c6:	2340      	movs	r3, #64	; 0x40
 80014c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	015a      	lsls	r2, r3, #5
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4413      	add	r3, r2
 80014dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014e0:	461a      	mov	r2, r3
 80014e2:	2302      	movs	r3, #2
 80014e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fc03 	bl	8001cfe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	3301      	adds	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	f47f af49 	bne.w	800139e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f002 fccc 	bl	8003eae <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800151c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001520:	d122      	bne.n	8001568 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800153c:	2b01      	cmp	r3, #1
 800153e:	d108      	bne.n	8001552 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001548:	2100      	movs	r1, #0
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fe0e 	bl	800216c <HAL_PCDEx_LPM_Callback>
 8001550:	e002      	b.n	8001558 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f004 fc4e 	bl	8005df4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fc9e 	bl	8003eae <USB_ReadInterrupts>
 8001572:	4603      	mov	r3, r0
 8001574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800157c:	d112      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b01      	cmp	r3, #1
 800158c:	d102      	bne.n	8001594 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f004 fc0a 	bl	8005da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fc80 	bl	8003eae <USB_ReadInterrupts>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b8:	f040 80c7 	bne.w	800174a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2110      	movs	r1, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f001 fd1a 	bl	8003010 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e0:	e056      	b.n	8001690 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ee:	461a      	mov	r2, r3
 80015f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	0151      	lsls	r1, r2, #5
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	440a      	add	r2, r1
 800160c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001614:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	015a      	lsls	r2, r3, #5
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001626:	0151      	lsls	r1, r2, #5
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	440a      	add	r2, r1
 800162c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001634:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001642:	461a      	mov	r2, r3
 8001644:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001648:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164c:	015a      	lsls	r2, r3, #5
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800165a:	0151      	lsls	r1, r2, #5
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	440a      	add	r2, r1
 8001660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001668:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167a:	0151      	lsls	r1, r2, #5
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	440a      	add	r2, r1
 8001680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001684:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001688:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	3301      	adds	r3, #1
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001696:	429a      	cmp	r2, r3
 8001698:	d3a3      	bcc.n	80015e2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d016      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c6:	f043 030b 	orr.w	r3, r3, #11
 80016ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016dc:	f043 030b 	orr.w	r3, r3, #11
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	e015      	b.n	8001710 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170a:	f043 030b 	orr.w	r3, r3, #11
 800170e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001722:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001734:	461a      	mov	r2, r3
 8001736:	f002 fc7f 	bl	8004038 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fbad 	bl	8003eae <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175e:	d124      	bne.n	80017aa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fc43 	bl	8003ff0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f001 fcab 	bl	80030ca <USB_GetDevSpeed>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681c      	ldr	r4, [r3, #0]
 8001780:	f001 f964 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8001784:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	4620      	mov	r0, r4
 8001790:	f001 f9ca 	bl	8002b28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f004 fade 	bl	8005d56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fb7d 	bl	8003eae <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d10a      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f004 fabb 	bl	8005d3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f002 0208 	and.w	r2, r2, #8
 80017d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fb68 	bl	8003eae <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017e8:	d10f      	bne.n	800180a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 fb1d 	bl	8005e34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fb4d 	bl	8003eae <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800181e:	d10f      	bne.n	8001840 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f004 faf0 	bl	8005e10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800183e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fb32 	bl	8003eae <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d10a      	bne.n	800186c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f004 fafe 	bl	8005e58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fb1c 	bl	8003eae <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b04      	cmp	r3, #4
 800187e:	d115      	bne.n	80018ac <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f004 faee 	bl	8005e74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6859      	ldr	r1, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	e000      	b.n	80018ac <HAL_PCD_IRQHandler+0x75e>
      return;
 80018aa:	bf00      	nop
    }
  }
}
 80018ac:	3734      	adds	r7, #52	; 0x34
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}

080018b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_PCD_SetAddress+0x1a>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e013      	b.n	80018f4 <HAL_PCD_SetAddress+0x42>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fa7a 	bl	8003dde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4603      	mov	r3, r0
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	460b      	mov	r3, r1
 8001910:	803b      	strh	r3, [r7, #0]
 8001912:	4613      	mov	r3, r2
 8001914:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800191a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800191e:	2b00      	cmp	r3, #0
 8001920:	da0f      	bge.n	8001942 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	f003 020f 	and.w	r2, r3, #15
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	3338      	adds	r3, #56	; 0x38
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	3304      	adds	r3, #4
 8001938:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	705a      	strb	r2, [r3, #1]
 8001940:	e00f      	b.n	8001962 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	f003 020f 	and.w	r2, r3, #15
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4413      	add	r3, r2
 8001958:	3304      	adds	r3, #4
 800195a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800196e:	883a      	ldrh	r2, [r7, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	78ba      	ldrb	r2, [r7, #2]
 8001978:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d102      	bne.n	8001998 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_PCD_EP_Open+0xaa>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e00e      	b.n	80019c4 <HAL_PCD_EP_Open+0xc8>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fbad 	bl	8003114 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da0f      	bge.n	8001a00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3338      	adds	r3, #56	; 0x38
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	3304      	adds	r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	705a      	strb	r2, [r3, #1]
 80019fe:	e00f      	b.n	8001a20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 020f 	and.w	r2, r3, #15
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_EP_Close+0x6e>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e00e      	b.n	8001a58 <HAL_PCD_EP_Close+0x8c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fbeb 	bl	8003224 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	f003 020f 	and.w	r2, r3, #15
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa2:	7afb      	ldrb	r3, [r7, #11]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6979      	ldr	r1, [r7, #20]
 8001ad4:	f001 fec6 	bl	8003864 <USB_EP0StartXfer>
 8001ad8:	e008      	b.n	8001aec <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	f001 fc78 	bl	80033dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	460b      	mov	r3, r1
 8001b04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3338      	adds	r3, #56	; 0x38
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2201      	movs	r2, #1
 8001b34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	6979      	ldr	r1, [r7, #20]
 8001b68:	f001 fe7c 	bl	8003864 <USB_EP0StartXfer>
 8001b6c:	e008      	b.n	8001b80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	f001 fc2e 	bl	80033dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d901      	bls.n	8001ba8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e050      	b.n	8001c4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da0f      	bge.n	8001bd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	3338      	adds	r3, #56	; 0x38
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	705a      	strb	r2, [r3, #1]
 8001bce:	e00d      	b.n	8001bec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	3304      	adds	r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_PCD_EP_SetStall+0x82>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e01e      	b.n	8001c4a <HAL_PCD_EP_SetStall+0xc0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 f80b 	bl	8003c36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10a      	bne.n	8001c40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	b2d9      	uxtb	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f002 f9fc 	bl	8004038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d901      	bls.n	8001c70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e042      	b.n	8001cf6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	da0f      	bge.n	8001c98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	3338      	adds	r3, #56	; 0x38
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	705a      	strb	r2, [r3, #1]
 8001c96:	e00f      	b.n	8001cb8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 020f 	and.w	r2, r3, #15
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	3304      	adds	r3, #4
 8001cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_PCD_EP_ClrStall+0x86>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e00e      	b.n	8001cf6 <HAL_PCD_EP_ClrStall+0xa4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 f813 	bl	8003d12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b08a      	sub	sp, #40	; 0x28
 8001d02:	af02      	add	r7, sp, #8
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	3338      	adds	r3, #56	; 0x38
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d901      	bls.n	8001d36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e06c      	b.n	8001e10 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	695a      	ldr	r2, [r3, #20]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d902      	bls.n	8001d52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3303      	adds	r3, #3
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d5a:	e02b      	b.n	8001db4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d902      	bls.n	8001d78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	3303      	adds	r3, #3
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4603      	mov	r3, r0
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f001 feb7 	bl	8003b0a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	441a      	add	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	441a      	add	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d809      	bhi.n	8001dde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d203      	bcs.n	8001dde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1be      	bne.n	8001d5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d811      	bhi.n	8001e0e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	2201      	movs	r2, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	333c      	adds	r3, #60	; 0x3c
 8001e30:	3304      	adds	r3, #4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	f040 80a0 	bne.w	8001f90 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d015      	beq.n	8001e86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a72      	ldr	r2, [pc, #456]	; (8002028 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	f240 80dd 	bls.w	800201e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80d7 	beq.w	800201e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	e0cb      	b.n	800201e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	6093      	str	r3, [r2, #8]
 8001ea2:	e0bc      	b.n	800201e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80b7 	bne.w	800201e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <PCD_EP_OutXfrComplete_int+0x210>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d90f      	bls.n	8001ed8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed4:	6093      	str	r3, [r2, #8]
 8001ed6:	e0a2      	b.n	800201e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001eea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	0159      	lsls	r1, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001efe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4403      	add	r3, r0
 8001f0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f12:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4403      	add	r3, r0
 8001f36:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4419      	add	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	4613      	mov	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4403      	add	r3, r0
 8001f4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f50:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d114      	bne.n	8001f82 <PCD_EP_OutXfrComplete_int+0x16a>
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d108      	bne.n	8001f82 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	f002 f85b 	bl	8004038 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f003 fea1 	bl	8005cd0 <HAL_PCD_DataOutStageCallback>
 8001f8e:	e046      	b.n	800201e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a26      	ldr	r2, [pc, #152]	; (800202c <PCD_EP_OutXfrComplete_int+0x214>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d124      	bne.n	8001fe2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	e032      	b.n	800201e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2320      	movs	r3, #32
 8001fd2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f003 fe78 	bl	8005cd0 <HAL_PCD_DataOutStageCallback>
 8001fe0:	e01d      	b.n	800201e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d114      	bne.n	8002012 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d108      	bne.n	8002012 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800200a:	461a      	mov	r2, r3
 800200c:	2100      	movs	r1, #0
 800200e:	f002 f813 	bl	8004038 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f003 fe59 	bl	8005cd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	4f54300a 	.word	0x4f54300a
 800202c:	4f54310a 	.word	0x4f54310a

08002030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	333c      	adds	r3, #60	; 0x3c
 8002048:	3304      	adds	r3, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d90e      	bls.n	8002084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f003 fe11 	bl	8005cac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d90c      	bls.n	80020ac <PCD_EP_OutSetupPacket_int+0x7c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d108      	bne.n	80020ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020a4:	461a      	mov	r2, r3
 80020a6:	2101      	movs	r1, #1
 80020a8:	f001 ffc6 	bl	8004038 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	4f54300a 	.word	0x4f54300a

080020bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
 80020c8:	4613      	mov	r3, r2
 80020ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020da:	883b      	ldrh	r3, [r7, #0]
 80020dc:	0419      	lsls	r1, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28
 80020e8:	e028      	b.n	800213c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e00d      	b.n	800211a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3340      	adds	r3, #64	; 0x40
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	0c1b      	lsrs	r3, r3, #16
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3301      	adds	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	3b01      	subs	r3, #1
 8002120:	429a      	cmp	r2, r3
 8002122:	d3ec      	bcc.n	80020fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002124:	883b      	ldrh	r3, [r7, #0]
 8002126:	0418      	lsls	r0, r3, #16
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	3b01      	subs	r3, #1
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	4302      	orrs	r2, r0
 8002134:	3340      	adds	r3, #64	; 0x40
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e267      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d00c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b82      	ldr	r3, [pc, #520]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e242      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6f      	ldr	r2, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe fb58 	bl	80008f0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fb54 	bl	80008f0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e207      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fb44 	bl	80008f0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fb40 	bl	80008f0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1f3      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe faf9 	bl	80008f0 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7fe faf5 	bl	80008f0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1a8      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fad8 	bl	80008f0 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe fad4 	bl	80008f0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e187      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d036      	beq.n	80023dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7fe fab8 	bl	80008f0 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fab4 	bl	80008f0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e167      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe faa1 	bl	80008f0 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e00e      	b.n	80023d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe fa9d 	bl	80008f0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d907      	bls.n	80023d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e150      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470000 	.word	0x42470000
 80023cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ea      	bne.n	80023b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8097 	beq.w	8002518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a73      	ldr	r2, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe fa5d 	bl	80008f0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe fa59 	bl	80008f0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e10c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x2ea>
 8002460:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x30c>
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a5b      	ldr	r2, [pc, #364]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe fa1e 	bl	80008f0 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe fa1a 	bl	80008f0 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0cb      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <HAL_RCC_OscConfig+0x334>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fa08 	bl	80008f0 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fa04 	bl	80008f0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0b5      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a1 	beq.w	8002664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d05c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d141      	bne.n	80025ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe f9d8 	bl	80008f0 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe f9d4 	bl	80008f0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e087      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe f9ad 	bl	80008f0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe f9a9 	bl	80008f0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e05c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x416>
 80025b8:	e054      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe f996 	bl	80008f0 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe f992 	bl	80008f0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e038      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4ec>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d028      	beq.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d121      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11a      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0cc      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d90c      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d044      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e067      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe f8c4 	bl	80008f0 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe f8c0 	bl	80008f0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e04f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d20c      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe f824 	bl	8000868 <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	080062d8 	.word	0x080062d8
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b094      	sub	sp, #80	; 0x50
 8002846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	2300      	movs	r3, #0
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002850:	2300      	movs	r3, #0
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002858:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d00d      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x40>
 8002864:	2b08      	cmp	r3, #8
 8002866:	f200 80e1 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 800286e:	2b04      	cmp	r3, #4
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3a>
 8002872:	e0db      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002878:	e0db      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287e:	e0d8      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	2200      	movs	r2, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4621      	mov	r1, r4
 80028cc:	1a51      	subs	r1, r2, r1
 80028ce:	6139      	str	r1, [r7, #16]
 80028d0:	4629      	mov	r1, r5
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e4:	4659      	mov	r1, fp
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ee:	4651      	mov	r1, sl
 80028f0:	018a      	lsls	r2, r1, #6
 80028f2:	4651      	mov	r1, sl
 80028f4:	ebb2 0801 	subs.w	r8, r2, r1
 80028f8:	4659      	mov	r1, fp
 80028fa:	eb63 0901 	sbc.w	r9, r3, r1
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800290e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002912:	4690      	mov	r8, r2
 8002914:	4699      	mov	r9, r3
 8002916:	4623      	mov	r3, r4
 8002918:	eb18 0303 	adds.w	r3, r8, r3
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	462b      	mov	r3, r5
 8002920:	eb49 0303 	adc.w	r3, r9, r3
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002932:	4629      	mov	r1, r5
 8002934:	024b      	lsls	r3, r1, #9
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800293c:	4621      	mov	r1, r4
 800293e:	024a      	lsls	r2, r1, #9
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	2200      	movs	r2, #0
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800294c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002950:	f7fd fc40 	bl	80001d4 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	e058      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	4618      	mov	r0, r3
 8002968:	4611      	mov	r1, r2
 800296a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	f04f 0000 	mov.w	r0, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	0159      	lsls	r1, r3, #5
 8002986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298a:	0150      	lsls	r0, r2, #5
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4641      	mov	r1, r8
 8002992:	ebb2 0a01 	subs.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb63 0b01 	sbc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b0:	ebb2 040a 	subs.w	r4, r2, sl
 80029b4:	eb63 050b 	sbc.w	r5, r3, fp
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	00eb      	lsls	r3, r5, #3
 80029c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c6:	00e2      	lsls	r2, r4, #3
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	18e3      	adds	r3, r4, r3
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	464b      	mov	r3, r9
 80029d4:	eb45 0303 	adc.w	r3, r5, r3
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e6:	4629      	mov	r1, r5
 80029e8:	028b      	lsls	r3, r1, #10
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f0:	4621      	mov	r1, r4
 80029f2:	028a      	lsls	r2, r1, #10
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	61fa      	str	r2, [r7, #28]
 8002a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a04:	f7fd fbe6 	bl	80001d4 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3750      	adds	r7, #80	; 0x50
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a64:	b084      	sub	sp, #16
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	f107 001c 	add.w	r0, r7, #28
 8002a72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d122      	bne.n	8002ac2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f001 fb1c 	bl	80040f4 <USB_CoreReset>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e01a      	b.n	8002af8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f001 fb10 	bl	80040f4 <USB_CoreReset>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aea:	e005      	b.n	8002af8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10b      	bne.n	8002b16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f043 0206 	orr.w	r2, r3, #6
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b22:	b004      	add	sp, #16
 8002b24:	4770      	bx	lr
	...

08002b28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d165      	bne.n	8002c08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4a41      	ldr	r2, [pc, #260]	; (8002c44 <USB_SetTurnaroundTime+0x11c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d906      	bls.n	8002b52 <USB_SetTurnaroundTime+0x2a>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4a40      	ldr	r2, [pc, #256]	; (8002c48 <USB_SetTurnaroundTime+0x120>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d202      	bcs.n	8002b52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e062      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4a3c      	ldr	r2, [pc, #240]	; (8002c48 <USB_SetTurnaroundTime+0x120>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d306      	bcc.n	8002b68 <USB_SetTurnaroundTime+0x40>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4a3b      	ldr	r2, [pc, #236]	; (8002c4c <USB_SetTurnaroundTime+0x124>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d202      	bcs.n	8002b68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002b62:	230e      	movs	r3, #14
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e057      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4a38      	ldr	r2, [pc, #224]	; (8002c4c <USB_SetTurnaroundTime+0x124>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d306      	bcc.n	8002b7e <USB_SetTurnaroundTime+0x56>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4a37      	ldr	r2, [pc, #220]	; (8002c50 <USB_SetTurnaroundTime+0x128>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d202      	bcs.n	8002b7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002b78:	230d      	movs	r3, #13
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e04c      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4a33      	ldr	r2, [pc, #204]	; (8002c50 <USB_SetTurnaroundTime+0x128>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d306      	bcc.n	8002b94 <USB_SetTurnaroundTime+0x6c>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <USB_SetTurnaroundTime+0x12c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d802      	bhi.n	8002b94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b8e:	230c      	movs	r3, #12
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e041      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <USB_SetTurnaroundTime+0x12c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d906      	bls.n	8002baa <USB_SetTurnaroundTime+0x82>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a2e      	ldr	r2, [pc, #184]	; (8002c58 <USB_SetTurnaroundTime+0x130>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d802      	bhi.n	8002baa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ba4:	230b      	movs	r3, #11
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e036      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4a2a      	ldr	r2, [pc, #168]	; (8002c58 <USB_SetTurnaroundTime+0x130>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d906      	bls.n	8002bc0 <USB_SetTurnaroundTime+0x98>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <USB_SetTurnaroundTime+0x134>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d802      	bhi.n	8002bc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002bba:	230a      	movs	r3, #10
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e02b      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <USB_SetTurnaroundTime+0x134>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d906      	bls.n	8002bd6 <USB_SetTurnaroundTime+0xae>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <USB_SetTurnaroundTime+0x138>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d202      	bcs.n	8002bd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002bd0:	2309      	movs	r3, #9
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e020      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a21      	ldr	r2, [pc, #132]	; (8002c60 <USB_SetTurnaroundTime+0x138>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d306      	bcc.n	8002bec <USB_SetTurnaroundTime+0xc4>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <USB_SetTurnaroundTime+0x13c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d802      	bhi.n	8002bec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002be6:	2308      	movs	r3, #8
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	e015      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <USB_SetTurnaroundTime+0x13c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d906      	bls.n	8002c02 <USB_SetTurnaroundTime+0xda>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <USB_SetTurnaroundTime+0x140>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d202      	bcs.n	8002c02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e00a      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c02:	2306      	movs	r3, #6
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	e007      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c0e:	2309      	movs	r3, #9
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e001      	b.n	8002c18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c14:	2309      	movs	r3, #9
 8002c16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	029b      	lsls	r3, r3, #10
 8002c2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	00d8acbf 	.word	0x00d8acbf
 8002c48:	00e4e1c0 	.word	0x00e4e1c0
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	01067380 	.word	0x01067380
 8002c54:	011a499f 	.word	0x011a499f
 8002c58:	01312cff 	.word	0x01312cff
 8002c5c:	014ca43f 	.word	0x014ca43f
 8002c60:	016e3600 	.word	0x016e3600
 8002c64:	01a6ab1f 	.word	0x01a6ab1f
 8002c68:	01e84800 	.word	0x01e84800

08002c6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f023 0201 	bic.w	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d115      	bne.n	8002cfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7fd fe12 	bl	8000908 <HAL_Delay>
      ms++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f001 f972 	bl	8003fd4 <USB_GetMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d01e      	beq.n	8002d34 <USB_SetCurrentMode+0x84>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b31      	cmp	r3, #49	; 0x31
 8002cfa:	d9f0      	bls.n	8002cde <USB_SetCurrentMode+0x2e>
 8002cfc:	e01a      	b.n	8002d34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d115      	bne.n	8002d30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fd fdf9 	bl	8000908 <HAL_Delay>
      ms++;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f001 f959 	bl	8003fd4 <USB_GetMode>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <USB_SetCurrentMode+0x84>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b31      	cmp	r3, #49	; 0x31
 8002d2c:	d9f0      	bls.n	8002d10 <USB_SetCurrentMode+0x60>
 8002d2e:	e001      	b.n	8002d34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e005      	b.n	8002d40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b32      	cmp	r3, #50	; 0x32
 8002d38:	d101      	bne.n	8002d3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d48:	b084      	sub	sp, #16
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	e009      	b.n	8002d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3340      	adds	r3, #64	; 0x40
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b0e      	cmp	r3, #14
 8002d80:	d9f2      	bls.n	8002d68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d11c      	bne.n	8002dc2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8002dc0:	e00b      	b.n	8002dda <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002de0:	461a      	mov	r2, r3
 8002de2:	2300      	movs	r3, #0
 8002de4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dec:	4619      	mov	r1, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df4:	461a      	mov	r2, r3
 8002df6:	680b      	ldr	r3, [r1, #0]
 8002df8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d10c      	bne.n	8002e1a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e06:	2100      	movs	r1, #0
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f945 	bl	8003098 <USB_SetDevSpeed>
 8002e0e:	e008      	b.n	8002e22 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e10:	2101      	movs	r1, #1
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f940 	bl	8003098 <USB_SetDevSpeed>
 8002e18:	e003      	b.n	8002e22 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f93b 	bl	8003098 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e22:	2110      	movs	r1, #16
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f8f3 	bl	8003010 <USB_FlushTxFifo>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f90f 	bl	8003058 <USB_FlushRxFifo>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	461a      	mov	r2, r3
 8002e58:	2300      	movs	r3, #0
 8002e5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e62:	461a      	mov	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e043      	b.n	8002ef6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e84:	d118      	bne.n	8002eb8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	e013      	b.n	8002eca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e008      	b.n	8002eca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2300      	movs	r3, #0
 8002eda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3b7      	bcc.n	8002e6e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	e043      	b.n	8002f8c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f1a:	d118      	bne.n	8002f4e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e013      	b.n	8002f60 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	e008      	b.n	8002f60 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2300      	movs	r3, #0
 8002f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3b7      	bcc.n	8002f04 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f043 0210 	orr.w	r2, r3, #16
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <USB_DevInit+0x2c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f043 0208 	orr.w	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003008:	b004      	add	sp, #16
 800300a:	4770      	bx	lr
 800300c:	803c3800 	.word	0x803c3800

08003010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	f043 0220 	orr.w	r2, r3, #32
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3301      	adds	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	4a08      	ldr	r2, [pc, #32]	; (8003054 <USB_FlushTxFifo+0x44>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e006      	b.n	8003048 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b20      	cmp	r3, #32
 8003044:	d0f1      	beq.n	800302a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	00030d40 	.word	0x00030d40

08003058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2210      	movs	r2, #16
 8003068:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3301      	adds	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	4a08      	ldr	r2, [pc, #32]	; (8003094 <USB_FlushRxFifo+0x3c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e006      	b.n	8003088 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d0f1      	beq.n	800306a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	00030d40 	.word	0x00030d40

08003098 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0306 	and.w	r3, r3, #6
 80030e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
 80030ee:	e00a      	b.n	8003106 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d002      	beq.n	80030fc <USB_GetDevSpeed+0x32>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d102      	bne.n	8003102 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80030fc:	2302      	movs	r3, #2
 80030fe:	75fb      	strb	r3, [r7, #23]
 8003100:	e001      	b.n	8003106 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003102:	230f      	movs	r3, #15
 8003104:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d13a      	bne.n	80031a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	2101      	movs	r1, #1
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800314e:	4313      	orrs	r3, r2
 8003150:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d155      	bne.n	8003214 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	78db      	ldrb	r3, [r3, #3]
 8003182:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003184:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	059b      	lsls	r3, r3, #22
 800318a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800318c:	4313      	orrs	r3, r2
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	440a      	add	r2, r1
 8003196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	e036      	b.n	8003214 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11a      	bne.n	8003214 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	78db      	ldrb	r3, [r3, #3]
 80031f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80031fa:	430b      	orrs	r3, r1
 80031fc:	4313      	orrs	r3, r2
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	0151      	lsls	r1, r2, #5
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	440a      	add	r2, r1
 8003206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	785b      	ldrb	r3, [r3, #1]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d161      	bne.n	8003304 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003256:	d11f      	bne.n	8003298 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	440a      	add	r2, r1
 800326e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003276:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	440a      	add	r2, r1
 800328e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003296:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032b8:	4013      	ands	r3, r2
 80032ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	2101      	movs	r1, #1
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	68f9      	ldr	r1, [r7, #12]
 80032d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032dc:	4013      	ands	r3, r2
 80032de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0159      	lsls	r1, r3, #5
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	4619      	mov	r1, r3
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <USB_DeactivateEndpoint+0x1b0>)
 80032fe:	4013      	ands	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
 8003302:	e060      	b.n	80033c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800331a:	d11f      	bne.n	800335c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	0151      	lsls	r1, r2, #5
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	440a      	add	r2, r1
 8003332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003336:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800333a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	0151      	lsls	r1, r2, #5
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	440a      	add	r2, r1
 8003352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800335a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	43db      	mvns	r3, r3
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337c:	4013      	ands	r3, r2
 800337e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	041b      	lsls	r3, r3, #16
 8003398:	43db      	mvns	r3, r3
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033a0:	4013      	ands	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	0159      	lsls	r1, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	440b      	add	r3, r1
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	4619      	mov	r1, r3
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <USB_DeactivateEndpoint+0x1b4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	ec337800 	.word	0xec337800
 80033d8:	eff37800 	.word	0xeff37800

080033dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	785b      	ldrb	r3, [r3, #1]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	f040 815c 	bne.w	80036b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d132      	bne.n	800346c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	0151      	lsls	r1, r2, #5
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	440a      	add	r2, r1
 800341c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	0151      	lsls	r1, r2, #5
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	440a      	add	r2, r1
 8003440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	0151      	lsls	r1, r2, #5
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	440a      	add	r2, r1
 8003460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003464:	0cdb      	lsrs	r3, r3, #19
 8003466:	04db      	lsls	r3, r3, #19
 8003468:	6113      	str	r3, [r2, #16]
 800346a:	e074      	b.n	8003556 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	440a      	add	r2, r1
 8003482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003486:	0cdb      	lsrs	r3, r3, #19
 8003488:	04db      	lsls	r3, r3, #19
 800348a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6959      	ldr	r1, [r3, #20]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	440b      	add	r3, r1
 80034c8:	1e59      	subs	r1, r3, #1
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80034d4:	4b9d      	ldr	r3, [pc, #628]	; (800374c <USB_EPStartXfer+0x370>)
 80034d6:	400b      	ands	r3, r1
 80034d8:	69b9      	ldr	r1, [r7, #24]
 80034da:	0148      	lsls	r0, r1, #5
 80034dc:	69f9      	ldr	r1, [r7, #28]
 80034de:	4401      	add	r1, r0
 80034e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80034e4:	4313      	orrs	r3, r2
 80034e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	0148      	lsls	r0, r1, #5
 8003502:	69f9      	ldr	r1, [r7, #28]
 8003504:	4401      	add	r1, r0
 8003506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800350a:	4313      	orrs	r3, r2
 800350c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	78db      	ldrb	r3, [r3, #3]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d11f      	bne.n	8003556 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	0151      	lsls	r1, r2, #5
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	440a      	add	r2, r1
 800352c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003530:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003534:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	0151      	lsls	r1, r2, #5
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	440a      	add	r2, r1
 800354c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003554:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d14b      	bne.n	80035f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d009      	beq.n	8003578 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	78db      	ldrb	r3, [r3, #3]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d128      	bne.n	80035d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	0151      	lsls	r1, r2, #5
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	440a      	add	r2, r1
 80035a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e00f      	b.n	80035d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	0151      	lsls	r1, r2, #5
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	440a      	add	r2, r1
 80035c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	0151      	lsls	r1, r2, #5
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	440a      	add	r2, r1
 80035e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e12f      	b.n	8003854 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	0151      	lsls	r1, r2, #5
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	440a      	add	r2, r1
 800360a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003612:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	78db      	ldrb	r3, [r3, #3]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d015      	beq.n	8003648 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8117 	beq.w	8003854 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	69f9      	ldr	r1, [r7, #28]
 800363e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003642:	4313      	orrs	r3, r2
 8003644:	634b      	str	r3, [r1, #52]	; 0x34
 8003646:	e105      	b.n	8003854 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d110      	bne.n	800367a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003672:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	e00f      	b.n	800369a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003698:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	68d9      	ldr	r1, [r3, #12]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	b298      	uxth	r0, r3
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4603      	mov	r3, r0
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fa2b 	bl	8003b0a <USB_WritePacket>
 80036b4:	e0ce      	b.n	8003854 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036d0:	0cdb      	lsrs	r3, r3, #19
 80036d2:	04db      	lsls	r3, r3, #19
 80036d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d126      	bne.n	8003750 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	69b9      	ldr	r1, [r7, #24]
 800371a:	0148      	lsls	r0, r1, #5
 800371c:	69f9      	ldr	r1, [r7, #28]
 800371e:	4401      	add	r1, r0
 8003720:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	0151      	lsls	r1, r2, #5
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	440a      	add	r2, r1
 800373e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003746:	6113      	str	r3, [r2, #16]
 8003748:	e036      	b.n	80037b8 <USB_EPStartXfer+0x3dc>
 800374a:	bf00      	nop
 800374c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4413      	add	r3, r2
 800375a:	1e5a      	subs	r2, r3, #1
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	8afb      	ldrh	r3, [r7, #22]
 8003776:	04d9      	lsls	r1, r3, #19
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <USB_EPStartXfer+0x484>)
 800377a:	400b      	ands	r3, r1
 800377c:	69b9      	ldr	r1, [r7, #24]
 800377e:	0148      	lsls	r0, r1, #5
 8003780:	69f9      	ldr	r1, [r7, #28]
 8003782:	4401      	add	r1, r0
 8003784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003788:	4313      	orrs	r3, r2
 800378a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	8af9      	ldrh	r1, [r7, #22]
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	69b9      	ldr	r1, [r7, #24]
 80037aa:	0148      	lsls	r0, r1, #5
 80037ac:	69f9      	ldr	r1, [r7, #28]
 80037ae:	4401      	add	r1, r0
 80037b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037b4:	4313      	orrs	r3, r2
 80037b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10d      	bne.n	80037da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	68d9      	ldr	r1, [r3, #12]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	460a      	mov	r2, r1
 80037d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	78db      	ldrb	r3, [r3, #3]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d128      	bne.n	8003834 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d110      	bne.n	8003814 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	0151      	lsls	r1, r2, #5
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	440a      	add	r2, r1
 8003808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800380c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00f      	b.n	8003834 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	440a      	add	r2, r1
 800382a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800382e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003832:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	440a      	add	r2, r1
 800384a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	1ff80000 	.word	0x1ff80000

08003864 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	4613      	mov	r3, r2
 8003870:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 80cd 	bne.w	8003a20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d132      	bne.n	80038f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	0151      	lsls	r1, r2, #5
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	440a      	add	r2, r1
 80038a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	0151      	lsls	r1, r2, #5
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	440a      	add	r2, r1
 80038e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ec:	0cdb      	lsrs	r3, r3, #19
 80038ee:	04db      	lsls	r3, r3, #19
 80038f0:	6113      	str	r3, [r2, #16]
 80038f2:	e04e      	b.n	8003992 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	0151      	lsls	r1, r2, #5
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	440a      	add	r2, r1
 800390a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390e:	0cdb      	lsrs	r3, r3, #19
 8003910:	04db      	lsls	r3, r3, #19
 8003912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	440a      	add	r2, r1
 800392a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003932:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003936:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d903      	bls.n	800394c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003966:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800396a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	6939      	ldr	r1, [r7, #16]
 8003984:	0148      	lsls	r0, r1, #5
 8003986:	6979      	ldr	r1, [r7, #20]
 8003988:	4401      	add	r1, r0
 800398a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d11e      	bne.n	80039d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e092      	b.n	8003afc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	0151      	lsls	r1, r2, #5
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	440a      	add	r2, r1
 80039ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d07e      	beq.n	8003afc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	6979      	ldr	r1, [r7, #20]
 8003a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	634b      	str	r3, [r1, #52]	; 0x34
 8003a1e:	e06d      	b.n	8003afc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3a:	0cdb      	lsrs	r3, r3, #19
 8003a3c:	04db      	lsls	r3, r3, #19
 8003a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	0151      	lsls	r1, r2, #5
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	440a      	add	r2, r1
 8003a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	6939      	ldr	r1, [r7, #16]
 8003aac:	0148      	lsls	r0, r1, #5
 8003aae:	6979      	ldr	r1, [r7, #20]
 8003ab0:	4401      	add	r1, r0
 8003ab2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10d      	bne.n	8003adc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68d9      	ldr	r1, [r3, #12]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	460a      	mov	r2, r1
 8003ada:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b089      	sub	sp, #36	; 0x24
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	4611      	mov	r1, r2
 8003b16:	461a      	mov	r2, r3
 8003b18:	460b      	mov	r3, r1
 8003b1a:	71fb      	strb	r3, [r7, #7]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003b28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d123      	bne.n	8003b78 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	3303      	adds	r3, #3
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e018      	b.n	8003b70 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	031a      	lsls	r2, r3, #12
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3301      	adds	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d3e2      	bcc.n	8003b3e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3724      	adds	r7, #36	; 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b08b      	sub	sp, #44	; 0x2c
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	4613      	mov	r3, r2
 8003b92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	e014      	b.n	8003bdc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	601a      	str	r2, [r3, #0]
    pDest++;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	3301      	adds	r3, #1
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3e6      	bcc.n	8003bb2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003be4:	8bfb      	ldrh	r3, [r7, #30]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01e      	beq.n	8003c28 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f107 0310 	add.w	r3, r7, #16
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	701a      	strb	r2, [r3, #0]
      i++;
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	3301      	adds	r3, #1
 8003c14:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	3301      	adds	r3, #1
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003c1c:	8bfb      	ldrh	r3, [r7, #30]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c22:	8bfb      	ldrh	r3, [r7, #30]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ea      	bne.n	8003bfe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	372c      	adds	r7, #44	; 0x2c
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12c      	bne.n	8003cac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db12      	blt.n	8003c8a <USB_EPSetStall+0x54>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c88:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e02b      	b.n	8003d04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db12      	blt.n	8003ce4 <USB_EPSetStall+0xae>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d128      	bne.n	8003d80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d003      	beq.n	8003d5e <USB_EPClearStall+0x4c>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	78db      	ldrb	r3, [r3, #3]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d138      	bne.n	8003dd0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e027      	b.n	8003dd0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	78db      	ldrb	r3, [r3, #3]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d003      	beq.n	8003db0 <USB_EPClearStall+0x9e>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	78db      	ldrb	r3, [r3, #3]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d10f      	bne.n	8003dd0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	0151      	lsls	r1, r2, #5
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e44:	f023 0303 	bic.w	r3, r3, #3
 8003e48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e58:	f023 0302 	bic.w	r3, r3, #2
 8003e5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0c1b      	lsrs	r3, r3, #16
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	b29b      	uxth	r3, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	01db      	lsls	r3, r3, #7
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	460b      	mov	r3, r1
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	333c      	adds	r3, #60	; 0x3c
 800404e:	3304      	adds	r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <USB_EP0_OutStart+0xb8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d90a      	bls.n	8004072 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406c:	d101      	bne.n	8004072 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e037      	b.n	80040e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a0:	f043 0318 	orr.w	r3, r3, #24
 80040a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80040b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80040ba:	7afb      	ldrb	r3, [r7, #11]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10f      	bne.n	80040e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80040de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	4f54300a 	.word	0x4f54300a

080040f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <USB_CoreReset+0x60>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e01a      	b.n	8004146 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	daf3      	bge.n	8004100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f043 0201 	orr.w	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <USB_CoreReset+0x60>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e006      	b.n	8004146 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d0f1      	beq.n	8004128 <USB_CoreReset+0x34>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	00030d40 	.word	0x00030d40

08004158 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004164:	2018      	movs	r0, #24
 8004166:	f002 f80b 	bl	8006180 <USBD_static_malloc>
 800416a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800417a:	2302      	movs	r3, #2
 800417c:	e038      	b.n	80041f0 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7c1b      	ldrb	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d107      	bne.n	800419e <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2205      	movs	r2, #5
 8004192:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2205      	movs	r2, #5
 8004198:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 800419c:	e006      	b.n	80041ac <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	220a      	movs	r2, #10
 80041a2:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	220a      	movs	r2, #10
 80041a8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80041ac:	2340      	movs	r3, #64	; 0x40
 80041ae:	2203      	movs	r2, #3
 80041b0:	2181      	movs	r1, #129	; 0x81
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 fed3 	bl	8005f5e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80041be:	2340      	movs	r3, #64	; 0x40
 80041c0:	2203      	movs	r2, #3
 80041c2:	2101      	movs	r1, #1
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f001 feca 	bl	8005f5e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	2302      	movs	r3, #2
 80041e6:	2101      	movs	r1, #1
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f001 ffa7 	bl	800613c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8004204:	2181      	movs	r1, #129	; 0x81
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 fecf 	bl	8005faa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8004218:	2101      	movs	r1, #1
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f001 fec5 	bl	8005faa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800424a:	4618      	mov	r0, r3
 800424c:	f001 ffa6 	bl	800619c <USBD_static_free>
    pdev->pClassData = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004274:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800428c:	2303      	movs	r3, #3
 800428e:	e0ed      	b.n	800446c <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004298:	2b00      	cmp	r3, #0
 800429a:	d052      	beq.n	8004342 <USBD_CUSTOM_HID_Setup+0xde>
 800429c:	2b20      	cmp	r3, #32
 800429e:	f040 80dd 	bne.w	800445c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	3b02      	subs	r3, #2
 80042a8:	2b09      	cmp	r3, #9
 80042aa:	d842      	bhi.n	8004332 <USBD_CUSTOM_HID_Setup+0xce>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <USBD_CUSTOM_HID_Setup+0x50>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	0800430d 	.word	0x0800430d
 80042b8:	080042eb 	.word	0x080042eb
 80042bc:	08004333 	.word	0x08004333
 80042c0:	08004333 	.word	0x08004333
 80042c4:	08004333 	.word	0x08004333
 80042c8:	08004333 	.word	0x08004333
 80042cc:	08004333 	.word	0x08004333
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	080042fb 	.word	0x080042fb
 80042d8:	080042dd 	.word	0x080042dd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	885b      	ldrh	r3, [r3, #2]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]
          break;
 80042e8:	e02a      	b.n	8004340 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3304      	adds	r3, #4
 80042ee:	2201      	movs	r2, #1
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 fa8f 	bl	8005816 <USBD_CtlSendData>
          break;
 80042f8:	e022      	b.n	8004340 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	885b      	ldrh	r3, [r3, #2]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b29b      	uxth	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]
          break;
 800430a:	e019      	b.n	8004340 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	3308      	adds	r3, #8
 8004310:	2201      	movs	r2, #1
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 fa7e 	bl	8005816 <USBD_CtlSendData>
          break;
 800431a:	e011      	b.n	8004340 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2201      	movs	r2, #1
 8004320:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004322:	6939      	ldr	r1, [r7, #16]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	88db      	ldrh	r3, [r3, #6]
 8004328:	461a      	mov	r2, r3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f001 fa9f 	bl	800586e <USBD_CtlPrepareRx>
          break;
 8004330:	e006      	b.n	8004340 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 f9fd 	bl	8005734 <USBD_CtlError>
          ret = USBD_FAIL;
 800433a:	2303      	movs	r3, #3
 800433c:	75fb      	strb	r3, [r7, #23]
          break;
 800433e:	bf00      	nop
      }
      break;
 8004340:	e093      	b.n	800446a <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	2b0b      	cmp	r3, #11
 8004348:	d87f      	bhi.n	800444a <USBD_CUSTOM_HID_Setup+0x1e6>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <USBD_CUSTOM_HID_Setup+0xec>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004381 	.word	0x08004381
 8004354:	08004459 	.word	0x08004459
 8004358:	0800444b 	.word	0x0800444b
 800435c:	0800444b 	.word	0x0800444b
 8004360:	0800444b 	.word	0x0800444b
 8004364:	0800444b 	.word	0x0800444b
 8004368:	080043ab 	.word	0x080043ab
 800436c:	0800444b 	.word	0x0800444b
 8004370:	0800444b 	.word	0x0800444b
 8004374:	0800444b 	.word	0x0800444b
 8004378:	080043f9 	.word	0x080043f9
 800437c:	08004423 	.word	0x08004423
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b03      	cmp	r3, #3
 800438a:	d107      	bne.n	800439c <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800438c:	f107 030e 	add.w	r3, r7, #14
 8004390:	2202      	movs	r2, #2
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f001 fa3e 	bl	8005816 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800439a:	e05e      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 f9c8 	bl	8005734 <USBD_CtlError>
            ret = USBD_FAIL;
 80043a4:	2303      	movs	r3, #3
 80043a6:	75fb      	strb	r3, [r7, #23]
          break;
 80043a8:	e057      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	885b      	ldrh	r3, [r3, #2]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b22      	cmp	r3, #34	; 0x22
 80043b4:	d10b      	bne.n	80043ce <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	88db      	ldrh	r3, [r3, #6]
 80043ba:	2b21      	cmp	r3, #33	; 0x21
 80043bc:	bf28      	it	cs
 80043be:	2321      	movcs	r3, #33	; 0x21
 80043c0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e00d      	b.n	80043ea <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	885b      	ldrh	r3, [r3, #2]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b21      	cmp	r3, #33	; 0x21
 80043d8:	d107      	bne.n	80043ea <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80043da:	4b26      	ldr	r3, [pc, #152]	; (8004474 <USBD_CUSTOM_HID_Setup+0x210>)
 80043dc:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	88db      	ldrh	r3, [r3, #6]
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	bf28      	it	cs
 80043e6:	2309      	movcs	r3, #9
 80043e8:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80043ea:	8bfb      	ldrh	r3, [r7, #30]
 80043ec:	461a      	mov	r2, r3
 80043ee:	69b9      	ldr	r1, [r7, #24]
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 fa10 	bl	8005816 <USBD_CtlSendData>
          break;
 80043f6:	e030      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b03      	cmp	r3, #3
 8004402:	d107      	bne.n	8004414 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	330c      	adds	r3, #12
 8004408:	2201      	movs	r2, #1
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f001 fa02 	bl	8005816 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004412:	e022      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f98c 	bl	8005734 <USBD_CtlError>
            ret = USBD_FAIL;
 800441c:	2303      	movs	r3, #3
 800441e:	75fb      	strb	r3, [r7, #23]
          break;
 8004420:	e01b      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b03      	cmp	r3, #3
 800442c:	d106      	bne.n	800443c <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	885b      	ldrh	r3, [r3, #2]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800443a:	e00e      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 f978 	bl	8005734 <USBD_CtlError>
            ret = USBD_FAIL;
 8004444:	2303      	movs	r3, #3
 8004446:	75fb      	strb	r3, [r7, #23]
          break;
 8004448:	e007      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800444a:	6839      	ldr	r1, [r7, #0]
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f001 f971 	bl	8005734 <USBD_CtlError>
          ret = USBD_FAIL;
 8004452:	2303      	movs	r3, #3
 8004454:	75fb      	strb	r3, [r7, #23]
          break;
 8004456:	e000      	b.n	800445a <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8004458:	bf00      	nop
      }
      break;
 800445a:	e006      	b.n	800446a <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f001 f968 	bl	8005734 <USBD_CtlError>
      ret = USBD_FAIL;
 8004464:	2303      	movs	r3, #3
 8004466:	75fb      	strb	r3, [r7, #23]
      break;
 8004468:	bf00      	nop
  }
  return (uint8_t)ret;
 800446a:	7dfb      	ldrb	r3, [r7, #23]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	200000c8 	.word	0x200000c8

08004478 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004490:	2303      	movs	r3, #3
 8004492:	e01a      	b.n	80044ca <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800449a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d10f      	bne.n	80044c8 <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	7d1b      	ldrb	r3, [r3, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2201      	movs	r2, #1
 80044b4:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80044b6:	88fb      	ldrh	r3, [r7, #6]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	2181      	movs	r1, #129	; 0x81
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f001 fe1c 	bl	80060fa <USBD_LL_Transmit>
 80044c2:	e001      	b.n	80044c8 <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2229      	movs	r2, #41	; 0x29
 80044e0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 80044e2:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000044 	.word	0x20000044

080044f4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2229      	movs	r2, #41	; 0x29
 8004500:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8004502:	4b03      	ldr	r3, [pc, #12]	; (8004510 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004504:	4618      	mov	r0, r3
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	20000070 	.word	0x20000070

08004514 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2229      	movs	r2, #41	; 0x29
 8004520:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004522:	4b03      	ldr	r3, [pc, #12]	; (8004530 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	2000009c 	.word	0x2000009c

08004534 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004546:	2200      	movs	r2, #0
 8004548:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800456a:	60fb      	str	r3, [r7, #12]
	((USBD_CUSTOM_HID_ItfTypeDef *) pdev->pUserData)->OutEvent(hhid->Report_buf);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4610      	mov	r0, r2
 8004578:	4798      	blx	r3
    USBD_LL_PrepareReceive (pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	2302      	movs	r3, #2
 800457e:	2101      	movs	r1, #1
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 fddb 	bl	800613c <USBD_LL_PrepareReceive>
    return (uint8_t) USBD_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e00a      	b.n	80045bc <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	2302      	movs	r3, #2
 80045b2:	2101      	movs	r1, #1
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f001 fdc1 	bl	800613c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d2:	60fb      	str	r3, [r7, #12]

	if (hhid->IsReportAvailable == 1)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d109      	bne.n	80045f0 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
	{
		((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4610      	mov	r0, r2
 80045e8:	4798      	blx	r3
		hhid->IsReportAvailable = 0;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
	}
	return USBD_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	220a      	movs	r2, #10
 8004608:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800460a:	4b03      	ldr	r3, [pc, #12]	; (8004618 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	200000d4 	.word	0x200000d4

0800461c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800462c:	2303      	movs	r3, #3
 800462e:	e004      	b.n	800463a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800465a:	2303      	movs	r3, #3
 800465c:	e01f      	b.n	800469e <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	79fa      	ldrb	r2, [r7, #7]
 8004690:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f001 fbfc 	bl	8005e90 <USBD_LL_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e016      	b.n	80046ec <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	f107 020e 	add.w	r2, r7, #14
 80046de:	4610      	mov	r0, r2
 80046e0:	4798      	blx	r3
 80046e2:	4602      	mov	r2, r0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f001 fc13 	bl	8005f28 <USBD_LL_Start>
 8004702:	4603      	mov	r3, r0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800472e:	2303      	movs	r3, #3
 8004730:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	4611      	mov	r1, r2
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	4611      	mov	r1, r2
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
  }

  return USBD_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 ff8f 	bl	80056c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d01a      	beq.n	80047fc <USBD_LL_SetupStage+0x72>
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d822      	bhi.n	8004810 <USBD_LL_SetupStage+0x86>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <USBD_LL_SetupStage+0x4a>
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d00a      	beq.n	80047e8 <USBD_LL_SetupStage+0x5e>
 80047d2:	e01d      	b.n	8004810 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa61 	bl	8004ca4 <USBD_StdDevReq>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73fb      	strb	r3, [r7, #15]
      break;
 80047e6:	e020      	b.n	800482a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fac5 	bl	8004d80 <USBD_StdItfReq>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]
      break;
 80047fa:	e016      	b.n	800482a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004802:	4619      	mov	r1, r3
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fb04 	bl	8004e12 <USBD_StdEPReq>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
      break;
 800480e:	e00c      	b.n	800482a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004816:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800481a:	b2db      	uxtb	r3, r3
 800481c:	4619      	mov	r1, r3
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 fbe2 	bl	8005fe8 <USBD_LL_StallEP>
 8004824:	4603      	mov	r3, r0
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	bf00      	nop
  }

  return ret;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	460b      	mov	r3, r1
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004842:	7afb      	ldrb	r3, [r7, #11]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d138      	bne.n	80048ba <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800484e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004856:	2b03      	cmp	r3, #3
 8004858:	d14a      	bne.n	80048f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	429a      	cmp	r2, r3
 8004864:	d913      	bls.n	800488e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	1ad2      	subs	r2, r2, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4293      	cmp	r3, r2
 800487e:	bf28      	it	cs
 8004880:	4613      	movcs	r3, r2
 8004882:	461a      	mov	r2, r3
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f001 f80e 	bl	80058a8 <USBD_CtlContinueRx>
 800488c:	e030      	b.n	80048f0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b03      	cmp	r3, #3
 8004898:	d10b      	bne.n	80048b2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f001 f809 	bl	80058ca <USBD_CtlSendStatus>
 80048b8:	e01a      	b.n	80048f0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d114      	bne.n	80048f0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00e      	beq.n	80048f0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	7afa      	ldrb	r2, [r7, #11]
 80048dc:	4611      	mov	r1, r2
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	4798      	blx	r3
 80048e2:	4603      	mov	r3, r0
 80048e4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	e000      	b.n	80048f2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b086      	sub	sp, #24
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	460b      	mov	r3, r1
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d16b      	bne.n	80049e6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3314      	adds	r3, #20
 8004912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800491a:	2b02      	cmp	r3, #2
 800491c:	d156      	bne.n	80049cc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	429a      	cmp	r2, r3
 8004928:	d914      	bls.n	8004954 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	461a      	mov	r2, r3
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 ff83 	bl	800584c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004946:	2300      	movs	r3, #0
 8004948:	2200      	movs	r2, #0
 800494a:	2100      	movs	r1, #0
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f001 fbf5 	bl	800613c <USBD_LL_PrepareReceive>
 8004952:	e03b      	b.n	80049cc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	429a      	cmp	r2, r3
 800495e:	d11c      	bne.n	800499a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004968:	429a      	cmp	r2, r3
 800496a:	d316      	bcc.n	800499a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004976:	429a      	cmp	r2, r3
 8004978:	d20f      	bcs.n	800499a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800497a:	2200      	movs	r2, #0
 800497c:	2100      	movs	r1, #0
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 ff64 	bl	800584c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800498c:	2300      	movs	r3, #0
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 fbd2 	bl	800613c <USBD_LL_PrepareReceive>
 8004998:	e018      	b.n	80049cc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d10b      	bne.n	80049be <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f001 fb11 	bl	8005fe8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 ff92 	bl	80058f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d122      	bne.n	8004a1c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fe98 	bl	800470c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80049e4:	e01a      	b.n	8004a1c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d114      	bne.n	8004a1c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	7afa      	ldrb	r2, [r7, #11]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	4798      	blx	r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	e000      	b.n	8004a1e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e02f      	b.n	8004aba <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00f      	beq.n	8004a84 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d009      	beq.n	8004a84 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6852      	ldr	r2, [r2, #4]
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	4611      	mov	r1, r2
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a84:	2340      	movs	r3, #64	; 0x40
 8004a86:	2200      	movs	r2, #0
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 fa67 	bl	8005f5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004aa0:	2340      	movs	r3, #64	; 0x40
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2180      	movs	r1, #128	; 0x80
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f001 fa59 	bl	8005f5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2240      	movs	r2, #64	; 0x40
 8004ab6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2204      	movs	r2, #4
 8004afc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d106      	bne.n	8004b30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b082      	sub	sp, #8
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e012      	b.n	8004b7a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d10b      	bne.n	8004b78 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3708      	adds	r7, #8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e014      	b.n	8004bc6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d10d      	bne.n	8004bc4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e014      	b.n	8004c12 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d10d      	bne.n	8004c10 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6852      	ldr	r2, [r2, #4]
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	4611      	mov	r1, r2
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
  }

  return USBD_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004c86:	8a3b      	ldrh	r3, [r7, #16]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	b21a      	sxth	r2, r3
 8004c8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004c96:	89fb      	ldrh	r3, [r7, #14]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cba:	2b40      	cmp	r3, #64	; 0x40
 8004cbc:	d005      	beq.n	8004cca <USBD_StdDevReq+0x26>
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d853      	bhi.n	8004d6a <USBD_StdDevReq+0xc6>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <USBD_StdDevReq+0x3a>
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d14f      	bne.n	8004d6a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	4798      	blx	r3
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
      break;
 8004cdc:	e04a      	b.n	8004d74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	785b      	ldrb	r3, [r3, #1]
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d83b      	bhi.n	8004d5e <USBD_StdDevReq+0xba>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <USBD_StdDevReq+0x48>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d41 	.word	0x08004d41
 8004cf0:	08004d55 	.word	0x08004d55
 8004cf4:	08004d5f 	.word	0x08004d5f
 8004cf8:	08004d4b 	.word	0x08004d4b
 8004cfc:	08004d5f 	.word	0x08004d5f
 8004d00:	08004d1f 	.word	0x08004d1f
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d5f 	.word	0x08004d5f
 8004d0c:	08004d37 	.word	0x08004d37
 8004d10:	08004d29 	.word	0x08004d29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f9de 	bl	80050d8 <USBD_GetDescriptor>
          break;
 8004d1c:	e024      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fb43 	bl	80053ac <USBD_SetAddress>
          break;
 8004d26:	e01f      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fb82 	bl	8005434 <USBD_SetConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	73fb      	strb	r3, [r7, #15]
          break;
 8004d34:	e018      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004d36:	6839      	ldr	r1, [r7, #0]
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fc21 	bl	8005580 <USBD_GetConfig>
          break;
 8004d3e:	e013      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fc52 	bl	80055ec <USBD_GetStatus>
          break;
 8004d48:	e00e      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fc81 	bl	8005654 <USBD_SetFeature>
          break;
 8004d52:	e009      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004d54:	6839      	ldr	r1, [r7, #0]
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fc90 	bl	800567c <USBD_ClrFeature>
          break;
 8004d5c:	e004      	b.n	8004d68 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fce7 	bl	8005734 <USBD_CtlError>
          break;
 8004d66:	bf00      	nop
      }
      break;
 8004d68:	e004      	b.n	8004d74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004d6a:	6839      	ldr	r1, [r7, #0]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fce1 	bl	8005734 <USBD_CtlError>
      break;
 8004d72:	bf00      	nop
  }

  return ret;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop

08004d80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d005      	beq.n	8004da6 <USBD_StdItfReq+0x26>
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d82f      	bhi.n	8004dfe <USBD_StdItfReq+0x7e>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <USBD_StdItfReq+0x26>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d12b      	bne.n	8004dfe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d81d      	bhi.n	8004df0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	889b      	ldrh	r3, [r3, #4]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d813      	bhi.n	8004de6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	4603      	mov	r3, r0
 8004dce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	88db      	ldrh	r3, [r3, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d110      	bne.n	8004dfa <USBD_StdItfReq+0x7a>
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fd73 	bl	80058ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004de4:	e009      	b.n	8004dfa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fca3 	bl	8005734 <USBD_CtlError>
          break;
 8004dee:	e004      	b.n	8004dfa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fc9e 	bl	8005734 <USBD_CtlError>
          break;
 8004df8:	e000      	b.n	8004dfc <USBD_StdItfReq+0x7c>
          break;
 8004dfa:	bf00      	nop
      }
      break;
 8004dfc:	e004      	b.n	8004e08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fc97 	bl	8005734 <USBD_CtlError>
      break;
 8004e06:	bf00      	nop
  }

  return ret;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	889b      	ldrh	r3, [r3, #4]
 8004e24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d007      	beq.n	8004e42 <USBD_StdEPReq+0x30>
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	f200 8145 	bhi.w	80050c2 <USBD_StdEPReq+0x2b0>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00c      	beq.n	8004e56 <USBD_StdEPReq+0x44>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	f040 8140 	bne.w	80050c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4798      	blx	r3
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
      break;
 8004e54:	e13a      	b.n	80050cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d007      	beq.n	8004e6e <USBD_StdEPReq+0x5c>
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	f300 8129 	bgt.w	80050b6 <USBD_StdEPReq+0x2a4>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d07f      	beq.n	8004f68 <USBD_StdEPReq+0x156>
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d03c      	beq.n	8004ee6 <USBD_StdEPReq+0xd4>
 8004e6c:	e123      	b.n	80050b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d002      	beq.n	8004e80 <USBD_StdEPReq+0x6e>
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d016      	beq.n	8004eac <USBD_StdEPReq+0x9a>
 8004e7e:	e02c      	b.n	8004eda <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e80:	7bbb      	ldrb	r3, [r7, #14]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <USBD_StdEPReq+0x90>
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	2b80      	cmp	r3, #128	; 0x80
 8004e8a:	d00a      	beq.n	8004ea2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e8c:	7bbb      	ldrb	r3, [r7, #14]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f8a9 	bl	8005fe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f001 f8a5 	bl	8005fe8 <USBD_LL_StallEP>
 8004e9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ea0:	e020      	b.n	8004ee4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fc45 	bl	8005734 <USBD_CtlError>
              break;
 8004eaa:	e01b      	b.n	8004ee4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	885b      	ldrh	r3, [r3, #2]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10e      	bne.n	8004ed2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004eb4:	7bbb      	ldrb	r3, [r7, #14]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <USBD_StdEPReq+0xc0>
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	2b80      	cmp	r3, #128	; 0x80
 8004ebe:	d008      	beq.n	8004ed2 <USBD_StdEPReq+0xc0>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	88db      	ldrh	r3, [r3, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d104      	bne.n	8004ed2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ec8:	7bbb      	ldrb	r3, [r7, #14]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f001 f88b 	bl	8005fe8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fcf9 	bl	80058ca <USBD_CtlSendStatus>

              break;
 8004ed8:	e004      	b.n	8004ee4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004eda:	6839      	ldr	r1, [r7, #0]
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fc29 	bl	8005734 <USBD_CtlError>
              break;
 8004ee2:	bf00      	nop
          }
          break;
 8004ee4:	e0ec      	b.n	80050c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d002      	beq.n	8004ef8 <USBD_StdEPReq+0xe6>
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d016      	beq.n	8004f24 <USBD_StdEPReq+0x112>
 8004ef6:	e030      	b.n	8004f5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <USBD_StdEPReq+0x108>
 8004efe:	7bbb      	ldrb	r3, [r7, #14]
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d00a      	beq.n	8004f1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 f86d 	bl	8005fe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f869 	bl	8005fe8 <USBD_LL_StallEP>
 8004f16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f18:	e025      	b.n	8004f66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fc09 	bl	8005734 <USBD_CtlError>
              break;
 8004f22:	e020      	b.n	8004f66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	885b      	ldrh	r3, [r3, #2]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11b      	bne.n	8004f64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 f873 	bl	8006026 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 fcc2 	bl	80058ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004f58:	e004      	b.n	8004f64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fbe9 	bl	8005734 <USBD_CtlError>
              break;
 8004f62:	e000      	b.n	8004f66 <USBD_StdEPReq+0x154>
              break;
 8004f64:	bf00      	nop
          }
          break;
 8004f66:	e0ab      	b.n	80050c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d002      	beq.n	8004f7a <USBD_StdEPReq+0x168>
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d032      	beq.n	8004fde <USBD_StdEPReq+0x1cc>
 8004f78:	e097      	b.n	80050aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <USBD_StdEPReq+0x17e>
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d004      	beq.n	8004f90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fbd3 	bl	8005734 <USBD_CtlError>
                break;
 8004f8e:	e091      	b.n	80050b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	da0b      	bge.n	8004fb0 <USBD_StdEPReq+0x19e>
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
 8004f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4413      	add	r3, r2
 8004fac:	3304      	adds	r3, #4
 8004fae:	e00b      	b.n	8004fc8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fc1d 	bl	8005816 <USBD_CtlSendData>
              break;
 8004fdc:	e06a      	b.n	80050b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004fde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da11      	bge.n	800500a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	f003 020f 	and.w	r2, r3, #15
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3324      	adds	r3, #36	; 0x24
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d117      	bne.n	8005030 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fb96 	bl	8005734 <USBD_CtlError>
                  break;
 8005008:	e054      	b.n	80050b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	f003 020f 	and.w	r2, r3, #15
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb83 	bl	8005734 <USBD_CtlError>
                  break;
 800502e:	e041      	b.n	80050b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005034:	2b00      	cmp	r3, #0
 8005036:	da0b      	bge.n	8005050 <USBD_StdEPReq+0x23e>
 8005038:	7bbb      	ldrb	r3, [r7, #14]
 800503a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	3310      	adds	r3, #16
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	4413      	add	r3, r2
 800504c:	3304      	adds	r3, #4
 800504e:	e00b      	b.n	8005068 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	3304      	adds	r3, #4
 8005068:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800506a:	7bbb      	ldrb	r3, [r7, #14]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <USBD_StdEPReq+0x264>
 8005070:	7bbb      	ldrb	r3, [r7, #14]
 8005072:	2b80      	cmp	r3, #128	; 0x80
 8005074:	d103      	bne.n	800507e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e00e      	b.n	800509c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800507e:	7bbb      	ldrb	r3, [r7, #14]
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 ffee 	bl	8006064 <USBD_LL_IsStallEP>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2201      	movs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e002      	b.n	800509c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2202      	movs	r2, #2
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fbb7 	bl	8005816 <USBD_CtlSendData>
              break;
 80050a8:	e004      	b.n	80050b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80050aa:	6839      	ldr	r1, [r7, #0]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fb41 	bl	8005734 <USBD_CtlError>
              break;
 80050b2:	bf00      	nop
          }
          break;
 80050b4:	e004      	b.n	80050c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb3b 	bl	8005734 <USBD_CtlError>
          break;
 80050be:	bf00      	nop
      }
      break;
 80050c0:	e004      	b.n	80050cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb35 	bl	8005734 <USBD_CtlError>
      break;
 80050ca:	bf00      	nop
  }

  return ret;
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	885b      	ldrh	r3, [r3, #2]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	f200 8128 	bhi.w	800534e <USBD_GetDescriptor+0x276>
 80050fe:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <USBD_GetDescriptor+0x2c>)
 8005100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005104:	08005121 	.word	0x08005121
 8005108:	08005139 	.word	0x08005139
 800510c:	08005179 	.word	0x08005179
 8005110:	0800534f 	.word	0x0800534f
 8005114:	0800534f 	.word	0x0800534f
 8005118:	080052ef 	.word	0x080052ef
 800511c:	0800531b 	.word	0x0800531b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	7c12      	ldrb	r2, [r2, #16]
 800512c:	f107 0108 	add.w	r1, r7, #8
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
 8005134:	60f8      	str	r0, [r7, #12]
      break;
 8005136:	e112      	b.n	800535e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	7c1b      	ldrb	r3, [r3, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10d      	bne.n	800515c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f107 0208 	add.w	r2, r7, #8
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3
 8005150:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3301      	adds	r3, #1
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800515a:	e100      	b.n	800535e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	f107 0208 	add.w	r2, r7, #8
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3301      	adds	r3, #1
 8005172:	2202      	movs	r2, #2
 8005174:	701a      	strb	r2, [r3, #0]
      break;
 8005176:	e0f2      	b.n	800535e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	885b      	ldrh	r3, [r3, #2]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b05      	cmp	r3, #5
 8005180:	f200 80ac 	bhi.w	80052dc <USBD_GetDescriptor+0x204>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <USBD_GetDescriptor+0xb4>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051a5 	.word	0x080051a5
 8005190:	080051d9 	.word	0x080051d9
 8005194:	0800520d 	.word	0x0800520d
 8005198:	08005241 	.word	0x08005241
 800519c:	08005275 	.word	0x08005275
 80051a0:	080052a9 	.word	0x080052a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	7c12      	ldrb	r2, [r2, #16]
 80051bc:	f107 0108 	add.w	r1, r7, #8
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051c6:	e091      	b.n	80052ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fab2 	bl	8005734 <USBD_CtlError>
            err++;
 80051d0:	7afb      	ldrb	r3, [r7, #11]
 80051d2:	3301      	adds	r3, #1
 80051d4:	72fb      	strb	r3, [r7, #11]
          break;
 80051d6:	e089      	b.n	80052ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	7c12      	ldrb	r2, [r2, #16]
 80051f0:	f107 0108 	add.w	r1, r7, #8
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
 80051f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051fa:	e077      	b.n	80052ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa98 	bl	8005734 <USBD_CtlError>
            err++;
 8005204:	7afb      	ldrb	r3, [r7, #11]
 8005206:	3301      	adds	r3, #1
 8005208:	72fb      	strb	r3, [r7, #11]
          break;
 800520a:	e06f      	b.n	80052ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	7c12      	ldrb	r2, [r2, #16]
 8005224:	f107 0108 	add.w	r1, r7, #8
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
 800522c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800522e:	e05d      	b.n	80052ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005230:	6839      	ldr	r1, [r7, #0]
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fa7e 	bl	8005734 <USBD_CtlError>
            err++;
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	3301      	adds	r3, #1
 800523c:	72fb      	strb	r3, [r7, #11]
          break;
 800523e:	e055      	b.n	80052ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	7c12      	ldrb	r2, [r2, #16]
 8005258:	f107 0108 	add.w	r1, r7, #8
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3
 8005260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005262:	e043      	b.n	80052ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa64 	bl	8005734 <USBD_CtlError>
            err++;
 800526c:	7afb      	ldrb	r3, [r7, #11]
 800526e:	3301      	adds	r3, #1
 8005270:	72fb      	strb	r3, [r7, #11]
          break;
 8005272:	e03b      	b.n	80052ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	7c12      	ldrb	r2, [r2, #16]
 800528c:	f107 0108 	add.w	r1, r7, #8
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
 8005294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005296:	e029      	b.n	80052ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fa4a 	bl	8005734 <USBD_CtlError>
            err++;
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	3301      	adds	r3, #1
 80052a4:	72fb      	strb	r3, [r7, #11]
          break;
 80052a6:	e021      	b.n	80052ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	7c12      	ldrb	r2, [r2, #16]
 80052c0:	f107 0108 	add.w	r1, r7, #8
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
 80052c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ca:	e00f      	b.n	80052ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa30 	bl	8005734 <USBD_CtlError>
            err++;
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	3301      	adds	r3, #1
 80052d8:	72fb      	strb	r3, [r7, #11]
          break;
 80052da:	e007      	b.n	80052ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa28 	bl	8005734 <USBD_CtlError>
          err++;
 80052e4:	7afb      	ldrb	r3, [r7, #11]
 80052e6:	3301      	adds	r3, #1
 80052e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80052ea:	bf00      	nop
      }
      break;
 80052ec:	e037      	b.n	800535e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7c1b      	ldrb	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d109      	bne.n	800530a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	f107 0208 	add.w	r2, r7, #8
 8005302:	4610      	mov	r0, r2
 8005304:	4798      	blx	r3
 8005306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005308:	e029      	b.n	800535e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800530a:	6839      	ldr	r1, [r7, #0]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa11 	bl	8005734 <USBD_CtlError>
        err++;
 8005312:	7afb      	ldrb	r3, [r7, #11]
 8005314:	3301      	adds	r3, #1
 8005316:	72fb      	strb	r3, [r7, #11]
      break;
 8005318:	e021      	b.n	800535e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	7c1b      	ldrb	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10d      	bne.n	800533e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f107 0208 	add.w	r2, r7, #8
 800532e:	4610      	mov	r0, r2
 8005330:	4798      	blx	r3
 8005332:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	2207      	movs	r2, #7
 800533a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800533c:	e00f      	b.n	800535e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f9f7 	bl	8005734 <USBD_CtlError>
        err++;
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	3301      	adds	r3, #1
 800534a:	72fb      	strb	r3, [r7, #11]
      break;
 800534c:	e007      	b.n	800535e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f9ef 	bl	8005734 <USBD_CtlError>
      err++;
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	3301      	adds	r3, #1
 800535a:	72fb      	strb	r3, [r7, #11]
      break;
 800535c:	bf00      	nop
  }

  if (err != 0U)
 800535e:	7afb      	ldrb	r3, [r7, #11]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11e      	bne.n	80053a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	88db      	ldrh	r3, [r3, #6]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d016      	beq.n	800539a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00e      	beq.n	8005390 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	88da      	ldrh	r2, [r3, #6]
 8005376:	893b      	ldrh	r3, [r7, #8]
 8005378:	4293      	cmp	r3, r2
 800537a:	bf28      	it	cs
 800537c:	4613      	movcs	r3, r2
 800537e:	b29b      	uxth	r3, r3
 8005380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005382:	893b      	ldrh	r3, [r7, #8]
 8005384:	461a      	mov	r2, r3
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fa44 	bl	8005816 <USBD_CtlSendData>
 800538e:	e009      	b.n	80053a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9ce 	bl	8005734 <USBD_CtlError>
 8005398:	e004      	b.n	80053a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa95 	bl	80058ca <USBD_CtlSendStatus>
 80053a0:	e000      	b.n	80053a4 <USBD_GetDescriptor+0x2cc>
    return;
 80053a2:	bf00      	nop
  }
}
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop

080053ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	889b      	ldrh	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d131      	bne.n	8005422 <USBD_SetAddress+0x76>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	88db      	ldrh	r3, [r3, #6]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d12d      	bne.n	8005422 <USBD_SetAddress+0x76>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	885b      	ldrh	r3, [r3, #2]
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d829      	bhi.n	8005422 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	885b      	ldrh	r3, [r3, #2]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d104      	bne.n	80053f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9a3 	bl	8005734 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ee:	e01d      	b.n	800542c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7bfa      	ldrb	r2, [r7, #15]
 80053f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fe5d 	bl	80060bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fa61 	bl	80058ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005416:	e009      	b.n	800542c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005420:	e004      	b.n	800542c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f985 	bl	8005734 <USBD_CtlError>
  }
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	885b      	ldrh	r3, [r3, #2]
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b4c      	ldr	r3, [pc, #304]	; (800557c <USBD_SetConfig+0x148>)
 800544a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800544c:	4b4b      	ldr	r3, [pc, #300]	; (800557c <USBD_SetConfig+0x148>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d905      	bls.n	8005460 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f96c 	bl	8005734 <USBD_CtlError>
    return USBD_FAIL;
 800545c:	2303      	movs	r3, #3
 800545e:	e088      	b.n	8005572 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d002      	beq.n	8005472 <USBD_SetConfig+0x3e>
 800546c:	2b03      	cmp	r3, #3
 800546e:	d025      	beq.n	80054bc <USBD_SetConfig+0x88>
 8005470:	e071      	b.n	8005556 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005472:	4b42      	ldr	r3, [pc, #264]	; (800557c <USBD_SetConfig+0x148>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01c      	beq.n	80054b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800547a:	4b40      	ldr	r3, [pc, #256]	; (800557c <USBD_SetConfig+0x148>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005484:	4b3d      	ldr	r3, [pc, #244]	; (800557c <USBD_SetConfig+0x148>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff f949 	bl	8004722 <USBD_SetClassConfig>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f949 	bl	8005734 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80054a2:	e065      	b.n	8005570 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa10 	bl	80058ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2203      	movs	r2, #3
 80054ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80054b2:	e05d      	b.n	8005570 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fa08 	bl	80058ca <USBD_CtlSendStatus>
      break;
 80054ba:	e059      	b.n	8005570 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80054bc:	4b2f      	ldr	r3, [pc, #188]	; (800557c <USBD_SetConfig+0x148>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d112      	bne.n	80054ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80054cc:	4b2b      	ldr	r3, [pc, #172]	; (800557c <USBD_SetConfig+0x148>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80054d6:	4b29      	ldr	r3, [pc, #164]	; (800557c <USBD_SetConfig+0x148>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	4619      	mov	r1, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff f93c 	bl	800475a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9f1 	bl	80058ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80054e8:	e042      	b.n	8005570 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80054ea:	4b24      	ldr	r3, [pc, #144]	; (800557c <USBD_SetConfig+0x148>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d02a      	beq.n	800554e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff f92a 	bl	800475a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <USBD_SetConfig+0x148>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <USBD_SetConfig+0x148>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff f903 	bl	8004722 <USBD_SetClassConfig>
 800551c:	4603      	mov	r3, r0
 800551e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00f      	beq.n	8005546 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f903 	bl	8005734 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff f90f 	bl	800475a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005544:	e014      	b.n	8005570 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9bf 	bl	80058ca <USBD_CtlSendStatus>
      break;
 800554c:	e010      	b.n	8005570 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9bb 	bl	80058ca <USBD_CtlSendStatus>
      break;
 8005554:	e00c      	b.n	8005570 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8eb 	bl	8005734 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <USBD_SetConfig+0x148>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff f8f8 	bl	800475a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800556a:	2303      	movs	r3, #3
 800556c:	73fb      	strb	r3, [r7, #15]
      break;
 800556e:	bf00      	nop
  }

  return ret;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000184 	.word	0x20000184

08005580 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	88db      	ldrh	r3, [r3, #6]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d004      	beq.n	800559c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f8cd 	bl	8005734 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800559a:	e023      	b.n	80055e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	dc02      	bgt.n	80055ae <USBD_GetConfig+0x2e>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	dc03      	bgt.n	80055b4 <USBD_GetConfig+0x34>
 80055ac:	e015      	b.n	80055da <USBD_GetConfig+0x5a>
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d00b      	beq.n	80055ca <USBD_GetConfig+0x4a>
 80055b2:	e012      	b.n	80055da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3308      	adds	r3, #8
 80055be:	2201      	movs	r2, #1
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f927 	bl	8005816 <USBD_CtlSendData>
        break;
 80055c8:	e00c      	b.n	80055e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3304      	adds	r3, #4
 80055ce:	2201      	movs	r2, #1
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f91f 	bl	8005816 <USBD_CtlSendData>
        break;
 80055d8:	e004      	b.n	80055e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f8a9 	bl	8005734 <USBD_CtlError>
        break;
 80055e2:	bf00      	nop
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	2b02      	cmp	r3, #2
 8005602:	d81e      	bhi.n	8005642 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	88db      	ldrh	r3, [r3, #6]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d004      	beq.n	8005616 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f890 	bl	8005734 <USBD_CtlError>
        break;
 8005614:	e01a      	b.n	800564c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f043 0202 	orr.w	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	330c      	adds	r3, #12
 8005636:	2202      	movs	r2, #2
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8eb 	bl	8005816 <USBD_CtlSendData>
      break;
 8005640:	e004      	b.n	800564c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005642:	6839      	ldr	r1, [r7, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f875 	bl	8005734 <USBD_CtlError>
      break;
 800564a:	bf00      	nop
  }
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	885b      	ldrh	r3, [r3, #2]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d106      	bne.n	8005674 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f92b 	bl	80058ca <USBD_CtlSendStatus>
  }
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568c:	b2db      	uxtb	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	2b02      	cmp	r3, #2
 8005692:	d80b      	bhi.n	80056ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	885b      	ldrh	r3, [r3, #2]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10c      	bne.n	80056b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f910 	bl	80058ca <USBD_CtlSendStatus>
      }
      break;
 80056aa:	e004      	b.n	80056b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f840 	bl	8005734 <USBD_CtlError>
      break;
 80056b4:	e000      	b.n	80056b8 <USBD_ClrFeature+0x3c>
      break;
 80056b6:	bf00      	nop
  }
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	781a      	ldrb	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	3301      	adds	r3, #1
 80056e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff fabc 	bl	8004c68 <SWAPBYTE>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff faaf 	bl	8004c68 <SWAPBYTE>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3301      	adds	r3, #1
 800571c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff faa2 	bl	8004c68 <SWAPBYTE>
 8005724:	4603      	mov	r3, r0
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	80da      	strh	r2, [r3, #6]
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fc51 	bl	8005fe8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005746:	2100      	movs	r1, #0
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fc4d 	bl	8005fe8 <USBD_LL_StallEP>
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d036      	beq.n	80057da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005770:	6938      	ldr	r0, [r7, #16]
 8005772:	f000 f836 	bl	80057e2 <USBD_GetLen>
 8005776:	4603      	mov	r3, r0
 8005778:	3301      	adds	r3, #1
 800577a:	b29b      	uxth	r3, r3
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	3301      	adds	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	4413      	add	r3, r2
 800579c:	2203      	movs	r2, #3
 800579e:	701a      	strb	r2, [r3, #0]
  idx++;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	3301      	adds	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80057a6:	e013      	b.n	80057d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4413      	add	r3, r2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3301      	adds	r3, #1
 80057b8:	613b      	str	r3, [r7, #16]
    idx++;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	3301      	adds	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4413      	add	r3, r2
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
 80057cc:	3301      	adds	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e7      	bne.n	80057a8 <USBD_GetString+0x52>
 80057d8:	e000      	b.n	80057dc <USBD_GetString+0x86>
    return;
 80057da:	bf00      	nop
  }
}
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80057f2:	e005      	b.n	8005800 <USBD_GetLen+0x1e>
  {
    len++;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	3301      	adds	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	3301      	adds	r3, #1
 80057fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f5      	bne.n	80057f4 <USBD_GetLen+0x12>
  }

  return len;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2202      	movs	r2, #2
 8005826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	2100      	movs	r1, #0
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fc5c 	bl	80060fa <USBD_LL_Transmit>

  return USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	2100      	movs	r1, #0
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fc4b 	bl	80060fa <USBD_LL_Transmit>

  return USBD_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2203      	movs	r2, #3
 800587e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	2100      	movs	r1, #0
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fc4f 	bl	800613c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	2100      	movs	r1, #0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fc3e 	bl	800613c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2204      	movs	r2, #4
 80058d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fc0a 	bl	80060fa <USBD_LL_Transmit>

  return USBD_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2205      	movs	r2, #5
 80058fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005900:	2300      	movs	r3, #0
 8005902:	2200      	movs	r2, #0
 8005904:	2100      	movs	r1, #0
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fc18 	bl	800613c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800591c:	2200      	movs	r2, #0
 800591e:	4912      	ldr	r1, [pc, #72]	; (8005968 <MX_USB_DEVICE_Init+0x50>)
 8005920:	4812      	ldr	r0, [pc, #72]	; (800596c <MX_USB_DEVICE_Init+0x54>)
 8005922:	f7fe fe90 	bl	8004646 <USBD_Init>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800592c:	f7fa fedc 	bl	80006e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005930:	490f      	ldr	r1, [pc, #60]	; (8005970 <MX_USB_DEVICE_Init+0x58>)
 8005932:	480e      	ldr	r0, [pc, #56]	; (800596c <MX_USB_DEVICE_Init+0x54>)
 8005934:	f7fe feb7 	bl	80046a6 <USBD_RegisterClass>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800593e:	f7fa fed3 	bl	80006e8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005942:	490c      	ldr	r1, [pc, #48]	; (8005974 <MX_USB_DEVICE_Init+0x5c>)
 8005944:	4809      	ldr	r0, [pc, #36]	; (800596c <MX_USB_DEVICE_Init+0x54>)
 8005946:	f7fe fe69 	bl	800461c <USBD_CUSTOM_HID_RegisterInterface>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005950:	f7fa feca 	bl	80006e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005954:	4805      	ldr	r0, [pc, #20]	; (800596c <MX_USB_DEVICE_Init+0x54>)
 8005956:	f7fe fecd 	bl	80046f4 <USBD_Start>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005960:	f7fa fec2 	bl	80006e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005964:	bf00      	nop
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000114 	.word	0x20000114
 800596c:	20000188 	.word	0x20000188
 8005970:	2000000c 	.word	0x2000000c
 8005974:	20000104 	.word	0x20000104

08005978 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800597c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800597e:	4618      	mov	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800598c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8005998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  memcpy (buffer, state, 0x40);
 80059a0:	4a0e      	ldr	r2, [pc, #56]	; (80059dc <CUSTOM_HID_OutEvent_FS+0x44>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	461c      	mov	r4, r3
 80059a6:	4616      	mov	r6, r2
 80059a8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80059ac:	4635      	mov	r5, r6
 80059ae:	4623      	mov	r3, r4
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ba:	3410      	adds	r4, #16
 80059bc:	3610      	adds	r6, #16
 80059be:	4564      	cmp	r4, ip
 80059c0:	d1f4      	bne.n	80059ac <CUSTOM_HID_OutEvent_FS+0x14>

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80059c2:	4807      	ldr	r0, [pc, #28]	; (80059e0 <CUSTOM_HID_OutEvent_FS+0x48>)
 80059c4:	f7fe fde4 	bl	8004590 <USBD_CUSTOM_HID_ReceivePacket>
  USBD_CUSTOM_HID_SendReport (&hUsbDeviceFS, (uint8_t *)buffer, 0x40);
 80059c8:	2240      	movs	r2, #64	; 0x40
 80059ca:	4904      	ldr	r1, [pc, #16]	; (80059dc <CUSTOM_HID_OutEvent_FS+0x44>)
 80059cc:	4804      	ldr	r0, [pc, #16]	; (80059e0 <CUSTOM_HID_OutEvent_FS+0x48>)
 80059ce:	f7fe fd53 	bl	8004478 <USBD_CUSTOM_HID_SendReport>
  return (USBD_OK);
 80059d2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059dc:	20000458 	.word	0x20000458
 80059e0:	20000188 	.word	0x20000188

080059e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	6039      	str	r1, [r7, #0]
 80059ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2212      	movs	r2, #18
 80059f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80059f6:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <USBD_FS_DeviceDescriptor+0x20>)
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	20000130 	.word	0x20000130

08005a08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	6039      	str	r1, [r7, #0]
 8005a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2204      	movs	r2, #4
 8005a18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005a1a:	4b03      	ldr	r3, [pc, #12]	; (8005a28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000144 	.word	0x20000144

08005a2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	6039      	str	r1, [r7, #0]
 8005a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d105      	bne.n	8005a4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	4907      	ldr	r1, [pc, #28]	; (8005a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8005a42:	4808      	ldr	r0, [pc, #32]	; (8005a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8005a44:	f7ff fe87 	bl	8005756 <USBD_GetString>
 8005a48:	e004      	b.n	8005a54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	4904      	ldr	r1, [pc, #16]	; (8005a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8005a4e:	4805      	ldr	r0, [pc, #20]	; (8005a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8005a50:	f7ff fe81 	bl	8005756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005a54:	4b02      	ldr	r3, [pc, #8]	; (8005a60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000498 	.word	0x20000498
 8005a64:	08006278 	.word	0x08006278

08005a68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6039      	str	r1, [r7, #0]
 8005a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	4904      	ldr	r1, [pc, #16]	; (8005a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005a78:	4804      	ldr	r0, [pc, #16]	; (8005a8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005a7a:	f7ff fe6c 	bl	8005756 <USBD_GetString>
  return USBD_StrDesc;
 8005a7e:	4b02      	ldr	r3, [pc, #8]	; (8005a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	20000498 	.word	0x20000498
 8005a8c:	08006298 	.word	0x08006298

08005a90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	6039      	str	r1, [r7, #0]
 8005a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	221a      	movs	r2, #26
 8005aa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005aa2:	f000 f843 	bl	8005b2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005aa6:	4b02      	ldr	r3, [pc, #8]	; (8005ab0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20000148 	.word	0x20000148

08005ab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	6039      	str	r1, [r7, #0]
 8005abe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	4907      	ldr	r1, [pc, #28]	; (8005ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005aca:	4808      	ldr	r0, [pc, #32]	; (8005aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8005acc:	f7ff fe43 	bl	8005756 <USBD_GetString>
 8005ad0:	e004      	b.n	8005adc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	4904      	ldr	r1, [pc, #16]	; (8005ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005ad6:	4805      	ldr	r0, [pc, #20]	; (8005aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ad8:	f7ff fe3d 	bl	8005756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005adc:	4b02      	ldr	r3, [pc, #8]	; (8005ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000498 	.word	0x20000498
 8005aec:	080062ac 	.word	0x080062ac

08005af0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	6039      	str	r1, [r7, #0]
 8005afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d105      	bne.n	8005b0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	4907      	ldr	r1, [pc, #28]	; (8005b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b06:	4808      	ldr	r0, [pc, #32]	; (8005b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b08:	f7ff fe25 	bl	8005756 <USBD_GetString>
 8005b0c:	e004      	b.n	8005b18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	4904      	ldr	r1, [pc, #16]	; (8005b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b12:	4805      	ldr	r0, [pc, #20]	; (8005b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b14:	f7ff fe1f 	bl	8005756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000498 	.word	0x20000498
 8005b28:	080062c0 	.word	0x080062c0

08005b2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b32:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <Get_SerialNum+0x44>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b38:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <Get_SerialNum+0x48>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005b3e:	4b0e      	ldr	r3, [pc, #56]	; (8005b78 <Get_SerialNum+0x4c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005b52:	2208      	movs	r2, #8
 8005b54:	4909      	ldr	r1, [pc, #36]	; (8005b7c <Get_SerialNum+0x50>)
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f814 	bl	8005b84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005b5c:	2204      	movs	r2, #4
 8005b5e:	4908      	ldr	r1, [pc, #32]	; (8005b80 <Get_SerialNum+0x54>)
 8005b60:	68b8      	ldr	r0, [r7, #8]
 8005b62:	f000 f80f 	bl	8005b84 <IntToUnicode>
  }
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	1fff7a10 	.word	0x1fff7a10
 8005b74:	1fff7a14 	.word	0x1fff7a14
 8005b78:	1fff7a18 	.word	0x1fff7a18
 8005b7c:	2000014a 	.word	0x2000014a
 8005b80:	2000015a 	.word	0x2000015a

08005b84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
 8005b9a:	e027      	b.n	8005bec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	0f1b      	lsrs	r3, r3, #28
 8005ba0:	2b09      	cmp	r3, #9
 8005ba2:	d80b      	bhi.n	8005bbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	0f1b      	lsrs	r3, r3, #28
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	7dfb      	ldrb	r3, [r7, #23]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	440b      	add	r3, r1
 8005bb4:	3230      	adds	r2, #48	; 0x30
 8005bb6:	b2d2      	uxtb	r2, r2
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	e00a      	b.n	8005bd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	0f1b      	lsrs	r3, r3, #28
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	440b      	add	r3, r1
 8005bcc:	3237      	adds	r2, #55	; 0x37
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	3301      	adds	r3, #1
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	4413      	add	r3, r2
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	3301      	adds	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
 8005bec:	7dfa      	ldrb	r2, [r7, #23]
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3d3      	bcc.n	8005b9c <IntToUnicode+0x18>
  }
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	609a      	str	r2, [r3, #8]
 8005c18:	60da      	str	r2, [r3, #12]
 8005c1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c24:	d13a      	bne.n	8005c9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	6313      	str	r3, [r2, #48]	; 0x30
 8005c36:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	613b      	str	r3, [r7, #16]
 8005c40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c50:	2303      	movs	r3, #3
 8005c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005c54:	230a      	movs	r3, #10
 8005c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4812      	ldr	r0, [pc, #72]	; (8005ca8 <HAL_PCD_MspInit+0xa4>)
 8005c60:	f7fa ff88 	bl	8000b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c68:	4a0e      	ldr	r2, [pc, #56]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6e:	6353      	str	r3, [r2, #52]	; 0x34
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	4a0a      	ldr	r2, [pc, #40]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c7e:	6453      	str	r3, [r2, #68]	; 0x44
 8005c80:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <HAL_PCD_MspInit+0xa0>)
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	2043      	movs	r0, #67	; 0x43
 8005c92:	f7fa ff38 	bl	8000b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005c96:	2043      	movs	r0, #67	; 0x43
 8005c98:	f7fa ff51 	bl	8000b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3728      	adds	r7, #40	; 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40020000 	.word	0x40020000

08005cac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f7fe fd61 	bl	800478a <USBD_LL_SetupStage>
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ce2:	78fa      	ldrb	r2, [r7, #3]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f7fe fd9b 	bl	8004834 <USBD_LL_DataOutStage>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	3348      	adds	r3, #72	; 0x48
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f7fe fde4 	bl	80048fa <USBD_LL_DataInStage>
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe fef8 	bl	8004b3e <USBD_LL_SOF>
}
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
 8005d6e:	e008      	b.n	8005d82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d102      	bne.n	8005d7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	73fb      	strb	r3, [r7, #15]
 8005d7c:	e001      	b.n	8005d82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005d7e:	f7fa fcb3 	bl	80006e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d88:	7bfa      	ldrb	r2, [r7, #15]
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe fe98 	bl	8004ac2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe fe44 	bl	8004a26 <USBD_LL_Reset>
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
	...

08005da8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe fe93 	bl	8004ae2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <HAL_PCD_SuspendCallback+0x48>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	4a03      	ldr	r2, [pc, #12]	; (8005df0 <HAL_PCD_SuspendCallback+0x48>)
 8005de2:	f043 0306 	orr.w	r3, r3, #6
 8005de6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	e000ed00 	.word	0xe000ed00

08005df4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fe83 	bl	8004b0e <USBD_LL_Resume>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	460b      	mov	r3, r1
 8005e1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e22:	78fa      	ldrb	r2, [r7, #3]
 8005e24:	4611      	mov	r1, r2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fed1 	bl	8004bce <USBD_LL_IsoOUTIncomplete>
}
 8005e2c:	bf00      	nop
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fe99 	bl	8004b82 <USBD_LL_IsoINIncomplete>
}
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe fed7 	bl	8004c1a <USBD_LL_DevConnected>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fed4 	bl	8004c30 <USBD_LL_DevDisconnected>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d13c      	bne.n	8005f1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <USBD_LL_Init+0x94>)
 8005eac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005eb0:	4b1c      	ldr	r3, [pc, #112]	; (8005f24 <USBD_LL_Init+0x94>)
 8005eb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005eb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <USBD_LL_Init+0x94>)
 8005eba:	2204      	movs	r2, #4
 8005ebc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005ebe:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005ec4:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005eca:	4b16      	ldr	r3, [pc, #88]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ecc:	2202      	movs	r2, #2
 8005ece:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005ed0:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ede:	2200      	movs	r2, #0
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005ee2:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <USBD_LL_Init+0x94>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005eee:	480d      	ldr	r0, [pc, #52]	; (8005f24 <USBD_LL_Init+0x94>)
 8005ef0:	f7fa ffdd 	bl	8000eae <HAL_PCD_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005efa:	f7fa fbf5 	bl	80006e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005efe:	2180      	movs	r1, #128	; 0x80
 8005f00:	4808      	ldr	r0, [pc, #32]	; (8005f24 <USBD_LL_Init+0x94>)
 8005f02:	f7fc f922 	bl	800214a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005f06:	2240      	movs	r2, #64	; 0x40
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4806      	ldr	r0, [pc, #24]	; (8005f24 <USBD_LL_Init+0x94>)
 8005f0c:	f7fc f8d6 	bl	80020bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005f10:	2280      	movs	r2, #128	; 0x80
 8005f12:	2101      	movs	r1, #1
 8005f14:	4803      	ldr	r0, [pc, #12]	; (8005f24 <USBD_LL_Init+0x94>)
 8005f16:	f7fc f8d1 	bl	80020bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	20000698 	.word	0x20000698

08005f28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fb f8d2 	bl	80010e8 <HAL_PCD_Start>
 8005f44:	4603      	mov	r3, r0
 8005f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f930 	bl	80061b0 <USBD_Get_USB_Status>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	4608      	mov	r0, r1
 8005f68:	4611      	mov	r1, r2
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	70fb      	strb	r3, [r7, #3]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70bb      	strb	r3, [r7, #2]
 8005f74:	4613      	mov	r3, r2
 8005f76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005f86:	78bb      	ldrb	r3, [r7, #2]
 8005f88:	883a      	ldrh	r2, [r7, #0]
 8005f8a:	78f9      	ldrb	r1, [r7, #3]
 8005f8c:	f7fb fcb6 	bl	80018fc <HAL_PCD_EP_Open>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 f90a 	bl	80061b0 <USBD_Get_USB_Status>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fb fcff 	bl	80019cc <HAL_PCD_EP_Close>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f8eb 	bl	80061b0 <USBD_Get_USB_Status>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	4611      	mov	r1, r2
 8006006:	4618      	mov	r0, r3
 8006008:	f7fb fdbf 	bl	8001b8a <HAL_PCD_EP_SetStall>
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f8cc 	bl	80061b0 <USBD_Get_USB_Status>
 8006018:	4603      	mov	r3, r0
 800601a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800601c:	7bbb      	ldrb	r3, [r7, #14]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f7fb fe04 	bl	8001c52 <HAL_PCD_EP_ClrStall>
 800604a:	4603      	mov	r3, r0
 800604c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f8ad 	bl	80061b0 <USBD_Get_USB_Status>
 8006056:	4603      	mov	r3, r0
 8006058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800605a:	7bbb      	ldrb	r3, [r7, #14]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006076:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607c:	2b00      	cmp	r3, #0
 800607e:	da0b      	bge.n	8006098 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	333e      	adds	r3, #62	; 0x3e
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	e00b      	b.n	80060b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	4611      	mov	r1, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fb fbe9 	bl	80018b2 <HAL_PCD_SetAddress>
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f862 	bl	80061b0 <USBD_Get_USB_Status>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b086      	sub	sp, #24
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	460b      	mov	r3, r1
 8006108:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800610a:	2300      	movs	r3, #0
 800610c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006118:	7af9      	ldrb	r1, [r7, #11]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	f7fb fcea 	bl	8001af6 <HAL_PCD_EP_Transmit>
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f841 	bl	80061b0 <USBD_Get_USB_Status>
 800612e:	4603      	mov	r3, r0
 8006130:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006132:	7dbb      	ldrb	r3, [r7, #22]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	607a      	str	r2, [r7, #4]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	460b      	mov	r3, r1
 800614a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800615a:	7af9      	ldrb	r1, [r7, #11]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	f7fb fc7e 	bl	8001a60 <HAL_PCD_EP_Receive>
 8006164:	4603      	mov	r3, r0
 8006166:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 f820 	bl	80061b0 <USBD_Get_USB_Status>
 8006170:	4603      	mov	r3, r0
 8006172:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006174:	7dbb      	ldrb	r3, [r7, #22]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006188:	4b03      	ldr	r3, [pc, #12]	; (8006198 <USBD_static_malloc+0x18>)
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	20000aa0 	.word	0x20000aa0

0800619c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d817      	bhi.n	80061f4 <USBD_Get_USB_Status+0x44>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <USBD_Get_USB_Status+0x1c>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061e3 	.word	0x080061e3
 80061d4:	080061e9 	.word	0x080061e9
 80061d8:	080061ef 	.word	0x080061ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
    break;
 80061e0:	e00b      	b.n	80061fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73fb      	strb	r3, [r7, #15]
    break;
 80061e6:	e008      	b.n	80061fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
    break;
 80061ec:	e005      	b.n	80061fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80061ee:	2303      	movs	r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
    break;
 80061f2:	e002      	b.n	80061fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	73fb      	strb	r3, [r7, #15]
    break;
 80061f8:	bf00      	nop
  }
  return usb_status;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	4d0d      	ldr	r5, [pc, #52]	; (8006240 <__libc_init_array+0x38>)
 800620c:	4c0d      	ldr	r4, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 800620e:	1b64      	subs	r4, r4, r5
 8006210:	10a4      	asrs	r4, r4, #2
 8006212:	2600      	movs	r6, #0
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	4d0b      	ldr	r5, [pc, #44]	; (8006248 <__libc_init_array+0x40>)
 800621a:	4c0c      	ldr	r4, [pc, #48]	; (800624c <__libc_init_array+0x44>)
 800621c:	f000 f820 	bl	8006260 <_init>
 8006220:	1b64      	subs	r4, r4, r5
 8006222:	10a4      	asrs	r4, r4, #2
 8006224:	2600      	movs	r6, #0
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	f855 3b04 	ldr.w	r3, [r5], #4
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	080062f0 	.word	0x080062f0
 8006244:	080062f0 	.word	0x080062f0
 8006248:	080062f0 	.word	0x080062f0
 800624c:	080062f4 	.word	0x080062f4

08006250 <memset>:
 8006250:	4402      	add	r2, r0
 8006252:	4603      	mov	r3, r0
 8006254:	4293      	cmp	r3, r2
 8006256:	d100      	bne.n	800625a <memset+0xa>
 8006258:	4770      	bx	lr
 800625a:	f803 1b01 	strb.w	r1, [r3], #1
 800625e:	e7f9      	b.n	8006254 <memset+0x4>

08006260 <_init>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	bf00      	nop
 8006264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006266:	bc08      	pop	{r3}
 8006268:	469e      	mov	lr, r3
 800626a:	4770      	bx	lr

0800626c <_fini>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr
